{"ast":null,"code":"import _objectSpread from \"/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/src/screen/UploadScreen.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport Loading from '../components/Loading'; //import '../styles/signup.css'\n\nimport '../styles/uploadForm.css';\nimport uploadThunk from '../redux/action/uploadThunk';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport imageListThunk from '../redux/action/imageListActionThunk';\nimport SyncLoader from '../components/SyncLoader';\n\nconst UploadImage = props => {\n  const dispatch = useDispatch();\n  const SingleData = useSelector(store => store.singleImage);\n  const token = useSelector(store => store.auth.token);\n  const error = SingleData.error,\n        success = SingleData.success,\n        loading = SingleData.loading,\n        imageId = SingleData.imageId;\n\n  const _useState = useState({\n    category: {\n      error: '',\n      value: ''\n    },\n    description: {\n      error: '',\n      value: ''\n    },\n    image: {\n      error: '',\n      value: null\n    }\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        uploadData = _useState2[0],\n        setUploadData = _useState2[1];\n\n  const handleChange = event => {\n    event.persist();\n    const target = event.target;\n\n    if (target.name === 'category') {\n      if (!target.value) {\n        setUploadData(prevState => _objectSpread({}, prevState, {\n          category: {\n            error: 'Category is required',\n            value: ''\n          }\n        }));\n      } else {\n        setUploadData(prevState => _objectSpread({}, prevState, {\n          category: {\n            error: '',\n            value: target.value\n          }\n        }));\n      }\n    } else if (target.name === 'description') {\n      if (!target.value) {\n        setUploadData(prevState => _objectSpread({}, prevState, {\n          description: {\n            error: 'Description is required',\n            value: ''\n          }\n        }));\n      } else {\n        setUploadData(prevState => _objectSpread({}, prevState, {\n          description: {\n            error: '',\n            value: target.value\n          }\n        }));\n      }\n    } else if (target.name === 'image') {\n      if (!target.files[0]) {\n        setUploadData(prevState => _objectSpread({}, prevState, {\n          image: {\n            error: 'Image is required',\n            value: ''\n          }\n        }));\n      } else if (target.files[0]) {\n        const supportedImageType = ['image/png', 'image/jpeg', 'image/jpg'];\n\n        if (!supportedImageType.includes(target.files[0].type)) {\n          setUploadData(prevState => _objectSpread({}, prevState, {\n            image: {\n              error: 'Only png, jpeg or jpg image mimetype is supported'\n            }\n          }));\n        } else {\n          setUploadData(prevState => _objectSpread({}, prevState, {\n            image: {\n              error: '',\n              value: target.files[0]\n            }\n          }));\n        }\n      }\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const _uploadData = _objectSpread({}, uploadData),\n          category = _uploadData.category,\n          description = _uploadData.description,\n          image = _uploadData.image;\n\n    if (!category.value) {\n      setUploadData(prevState => _objectSpread({}, prevState, {\n        category: {\n          error: 'Category is required',\n          value: ''\n        }\n      }));\n    } else if (!description.value) {\n      setUploadData(prevState => _objectSpread({}, prevState, {\n        description: {\n          error: 'description is requird',\n          value: ''\n        }\n      }));\n    } else if (!image.value) {\n      setUploadData(prevState => _objectSpread({}, prevState, {\n        image: {\n          error: 'Upload a supported photo format',\n          value: ''\n        }\n      }));\n    } else if (category.value && description.value && image.value) {\n      dispatch(uploadThunk(image.value, description.value, category.value, token));\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"upload-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-main\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"upload\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Upload Photo\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"category-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"category-option\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Image category\"), React.createElement(\"select\", {\n    name: \"category\",\n    onChange: handleChange,\n    className: \"category\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    selected: true,\n    value: \"love\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"Love\"), React.createElement(\"option\", {\n    value: \"celebration\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Celebration\"), React.createElement(\"option\", {\n    value: \"happiness\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Happiness\"), React.createElement(\"option\", {\n    value: \"sadness\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Sadness\"), React.createElement(\"option\", {\n    value: \"throwback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"ThrowBack\"), React.createElement(\"option\", {\n    value: \"general\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"General\")), React.createElement(\"div\", {\n    className: \"form-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, uploadData.category.error ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, uploadData.category.error) : null)), React.createElement(\"div\", {\n    className: \"description-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Caption\"), React.createElement(TextareaAutosize, {\n    name: \"description\",\n    rows: 4,\n    onChange: handleChange,\n    className: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, uploadData.description.error ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, uploadData.description.error) : null), React.createElement(\"div\", {\n    className: \"image-upload\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"image\",\n    name: \"image\",\n    type: \"file\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, uploadData.image.error ? uploadData.image.error : null, uploadData.image.value && React.createElement(\"div\", {\n    className: \"image-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, uploadData.image.value.name)), React.createElement(\"div\", {\n    className: \"cancel-signup-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"upload-submit\",\n    disabled: loading ? true : false,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, loading ? React.createElement(\"div\", {\n    style: {\n      color: 'black',\n      fontSize: 15,\n      fontWeight: 'bold'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"Loading...\") : 'Submit'))), error && React.createElement(\"div\", {\n    className: \"reducer-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, error)));\n};\n\nexport default UploadImage;","map":{"version":3,"sources":["/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/src/screen/UploadScreen.js"],"names":["React","useEffect","useState","useDispatch","useSelector","Redirect","Formik","Loading","uploadThunk","TextareaAutosize","imageListThunk","SyncLoader","UploadImage","props","dispatch","SingleData","store","singleImage","token","auth","error","success","loading","imageId","category","value","description","image","uploadData","setUploadData","handleChange","event","persist","target","name","prevState","files","supportedImageType","includes","type","handleSubmit","preventDefault","color","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Redirect} from 'react-router-dom'\nimport {Formik} from 'formik'\nimport Loading from '../components/Loading'\n//import '../styles/signup.css'\nimport '../styles/uploadForm.css'\nimport uploadThunk from '../redux/action/uploadThunk'\nimport TextareaAutosize from 'react-autosize-textarea'\nimport imageListThunk from '../redux/action/imageListActionThunk'\nimport SyncLoader from '../components/SyncLoader' \n\nconst UploadImage = (props) => {\n   const dispatch = useDispatch()\n   const SingleData = useSelector(store => store.singleImage)\n   const token = useSelector(store => store.auth.token)\n   const {error, success, loading, imageId} = SingleData\n   const [uploadData, setUploadData] = useState({\n       category: {error: '', value: ''},\n       description: {error: '', value: ''},\n       image:{error: '', value: null}\n    })\n\n    const handleChange = (event)=>{\n        event.persist()\n        const target = event.target;\n            if(target.name === 'category'){\n                if(!target.value){\n                    setUploadData(prevState => ({\n                        ...prevState,\n                        category: {error: 'Category is required', value: '',}\n                    }))\n                }else{\n                    setUploadData(prevState =>({\n                        ...prevState,\n                        category: {error: '', value: target.value}\n                    }))\n                }\n            }else if(target.name === 'description'){\n                if(!target.value){\n                    setUploadData(prevState =>({\n                        ...prevState,\n                        description:{error: 'Description is required', value: ''}\n                    }))\n                }else{\n                    setUploadData(prevState => ({\n                        ...prevState,\n                        description: {error: '', value: target.value}\n                    }))\n                }\n            }\n\n            else if(target.name === 'image'){\n                \n                if(!target.files[0]){\n                    setUploadData(prevState =>({\n                        ...prevState,\n                        image: {error: 'Image is required', value: ''}\n                    }))\n                }else if(target.files[0]){\n                    const supportedImageType = ['image/png', 'image/jpeg', 'image/jpg']\n                    if(!supportedImageType.includes(target.files[0].type)){\n                        setUploadData(prevState =>({\n                            ...prevState,\n                            image: {error: 'Only png, jpeg or jpg image mimetype is supported'}\n                        }))\n                    }else{\n                    setUploadData(prevState => ({\n                        ...prevState,\n                        image: {error: '', value: target.files[0]}\n                    }))\n                }\n                }\n\n        }\n    }\n\n    const handleSubmit = (event)=>{\n        event.preventDefault()\n        const {category, description, image} = {...uploadData}\n        if(!category.value){\n            setUploadData(prevState =>({\n                ...prevState,\n                category: {error: 'Category is required', value: ''}\n            }))\n        }else if(!description.value){\n            setUploadData(prevState =>({\n                ...prevState,\n                description: {error: 'description is requird', value: ''}\n            }))\n        }else if(!image.value){\n            setUploadData(prevState =>({\n                ...prevState,\n                image: {error:'Upload a supported photo format', value: ''}\n            }))\n        }else if(category.value && description.value && image.value){\n            dispatch(uploadThunk(image.value, description.value, category.value, token))\n        }\n    }\n    return (\n        <div className='upload-wrapper'>\n        <div className=\"form-main\">\n            <div className='upload'>Upload Photo</div>\n            \n            <form onSubmit={handleSubmit} className='form-control'>\n                <div className='category-wrapper'>\n                        <label htmlFor='category-option'>Image category</label>\n                        <select name=\"category\" onChange={handleChange} className='category'>\n                            <option selected value=\"love\">Love</option>\n                            <option value=\"celebration\">Celebration</option>\n                            <option value=\"happiness\">Happiness</option>\n                            <option value=\"sadness\">Sadness</option>\n                            <option value='throwback'>ThrowBack</option>\n                            <option value=\"general\">General</option>\n                        </select>\n\n                <div className='form-error'>\n                    {uploadData.category.error ? \n                    (<div>{uploadData.category.error}</div>): null}\n                </div>\n                </div>\n\n                <div className='description-wrapper'>\n                    <label htmlFor='description'>Caption</label>\n                   <TextareaAutosize name='description' rows={4} onChange={handleChange} className='description' />\n                </div>\n                <div className='form-error'>\n                    {uploadData.description.error ? (\n                        <div>{uploadData.description.error}</div> \n                    ): null}\n                </div>\n\n                <div className='image-upload'>\n                    <input\n                        id='image'\n                        name='image'\n                        type='file'\n                        onChange={handleChange}\n                    />\n                   \n                </div>\n                <div className='form-error'>\n                {uploadData.image.error ? uploadData.image.error : null }\n                \n                {uploadData.image.value && (<div className='image-name'>{uploadData.image.value.name}</div>)}\n                </div>\n                <div className='cancel-signup-wrapper'>\n                    <button className='upload-submit' disabled={loading ? true : false} type='submit'>{loading ? <div style={{color: 'black', fontSize: 15, fontWeight: 'bold'}}>Loading...</div> : 'Submit'}</button>\n                \n                </div>\n            </form>\n            {error && (<div className='reducer-error'>{error}</div>)}\n        </div>\n        </div>\n    )\n}\n\nexport default UploadImage"]},"metadata":{},"sourceType":"module"}