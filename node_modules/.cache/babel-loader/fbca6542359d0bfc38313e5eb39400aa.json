{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/node_modules/@babel/runtime/regenerator\";import{thumpDown,thumpUp,updateSingleImageThumpDown,updateSingleImageThumpUp}from'./thumpAction';var thumpThunk=function thumpThunk(imageId,token){var thumpUpResolver=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;return function _callee(dispatch){var graphqlQuery,response,resData;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0://dispatch(thumpBegin())\n// thumpUpResolver is true if the thunk will make a fetch request to thumpUpMutation\nif(thumpUpResolver){graphqlQuery={query:\"\\n            mutation thumpUp($imageId: ID!){\\n                thumpUpMutation(imageId: $imageId){\\n                    thumpUp{\\n                        thumpUpCount\\n                        userActionThumpUp{\\n                            _id\\n                        }\\n                    }\\n\\n                    imageId\\n                    thumpDown{\\n                        thumpDownCount\\n                        userActionThumpDown{\\n                            _id\\n                        }\\n                    }\\n\\n                }\\n            }\",variables:{imageId:imageId}};}else{graphqlQuery={query:\"\\n            mutation thumpDown($imageId: ID!){\\n                thumpDownMutation(imageId: $imageId){\\n                    thumpUp{\\n                        thumpUpCount\\n                        userActionThumpUp{\\n                            _id\\n                        }\\n                    }\\n                    imageId\\n                    thumpDown{\\n                        thumpDownCount\\n                        userActionThumpDown{\\n                            _id\\n                        }\\n                    }\\n\\n                }\\n            }\",variables:{imageId:imageId}};}_context.prev=1;_context.next=4;return _regeneratorRuntime.awrap(fetch('/graphql',{method:'POST',headers:{'Content-Type':'application/json',Authorization:'Bearer '+token},body:JSON.stringify(graphqlQuery)}));case 4:response=_context.sent;_context.next=7;return _regeneratorRuntime.awrap(response.json());case 7:resData=_context.sent;if(!resData.errors){_context.next=12;break;}if(!(resData.errors[0].status===401)){_context.next=11;break;}throw Error('You are not authorized');case 11:throw Error('Image not found');case 12://check if the resolve if for thump up mutation\nif(thumpUpResolver){dispatch(updateSingleImageThumpUp(resData));dispatch(thumpUp(resData));}else{dispatch(updateSingleImageThumpDown(resData));dispatch(thumpDown(resData));}_context.next=18;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](1);console.log(_context.t0);//dispatch(thumpFail(error))\ncase 18:case\"end\":return _context.stop();}}},null,null,[[1,15]]);};};export default thumpThunk;","map":{"version":3,"sources":["/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/src/redux/action/thumpThunk.js"],"names":["thumpDown","thumpUp","updateSingleImageThumpDown","updateSingleImageThumpUp","thumpThunk","imageId","token","thumpUpResolver","dispatch","graphqlQuery","query","variables","fetch","method","headers","Authorization","body","JSON","stringify","response","json","resData","errors","status","Error","console","log"],"mappings":"uIAAA,OAAQA,SAAR,CAAmBC,OAAnB,CAA4BC,0BAA5B,CAAwDC,wBAAxD,KAAuF,eAAvF,CAGA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,OAAD,CAAUC,KAAV,CAA0C,IAAzBC,CAAAA,eAAyB,2DAAP,IAAO,CAEzD,MAAO,kBAAMC,QAAN,qJACH;AAEJ;AAGA,GAAGD,eAAH,CAAmB,CACfE,YAAY,CAAG,CACXC,KAAK,qjBADM,CAqBXC,SAAS,CAAC,CACNN,OAAO,CAACA,OADF,CArBC,CAAf,CA0BH,CA3BD,IA2BK,CACDI,YAAY,CAAG,CACXC,KAAK,ujBADM,CAoBXC,SAAS,CAAC,CACNN,OAAO,CAAPA,OADM,CApBC,CAAf,CAyBH,CA3DM,iEA+DoBO,KAAK,CAAC,UAAD,CAAY,CACpCC,MAAM,CAAE,MAD4B,CAEpCC,OAAO,CAAC,CACJ,eAAgB,kBADZ,CAEJC,aAAa,CAAE,UAAYT,KAFvB,CAF4B,CAMpCU,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeT,YAAf,CAN8B,CAAZ,CA/DzB,SA+DGU,QA/DH,gEAwEmBA,QAAQ,CAACC,IAAT,EAxEnB,SAwEGC,OAxEH,mBAyEAA,OAAO,CAACC,MAzER,+BA0EID,OAAO,CAACC,MAAR,CAAe,CAAf,EAAkBC,MAAlB,GAA6B,GA1EjC,gCA2EWC,CAAAA,KAAK,CAAC,wBAAD,CA3EhB,cA6EOA,CAAAA,KAAK,CAAC,iBAAD,CA7EZ,SAgFH;AACA,GAAGjB,eAAH,CAAmB,CACfC,QAAQ,CAACL,wBAAwB,CAACkB,OAAD,CAAzB,CAAR,CACAb,QAAQ,CAACP,OAAO,CAACoB,OAAD,CAAR,CAAR,CACH,CAHD,IAGK,CACDb,QAAQ,CAACN,0BAA0B,CAACmB,OAAD,CAA3B,CAAR,CACAb,QAAQ,CAACR,SAAS,CAACqB,OAAD,CAAV,CAAR,CACH,CAvFE,iFAyFHI,OAAO,CAACC,GAAR,cACA;AA1FG,kEAAP,CA6FH,CA/FD,CAiGA,cAAetB,CAAAA,UAAf","sourcesContent":["import {thumpDown, thumpUp, updateSingleImageThumpDown, updateSingleImageThumpUp} from './thumpAction'\n\n\nconst thumpThunk = (imageId, token, thumpUpResolver = true)=>{\n\n    return async dispatch =>{ \n        //dispatch(thumpBegin())\n\n    // thumpUpResolver is true if the thunk will make a fetch request to thumpUpMutation\n    let graphqlQuery\n\n    if(thumpUpResolver){\n        graphqlQuery = {\n            query: `\n            mutation thumpUp($imageId: ID!){\n                thumpUpMutation(imageId: $imageId){\n                    thumpUp{\n                        thumpUpCount\n                        userActionThumpUp{\n                            _id\n                        }\n                    }\n\n                    imageId\n                    thumpDown{\n                        thumpDownCount\n                        userActionThumpDown{\n                            _id\n                        }\n                    }\n\n                }\n            }`,\n            variables:{\n                imageId:imageId\n            }\n        }\n\n    }else{\n        graphqlQuery = {\n            query: `\n            mutation thumpDown($imageId: ID!){\n                thumpDownMutation(imageId: $imageId){\n                    thumpUp{\n                        thumpUpCount\n                        userActionThumpUp{\n                            _id\n                        }\n                    }\n                    imageId\n                    thumpDown{\n                        thumpDownCount\n                        userActionThumpDown{\n                            _id\n                        }\n                    }\n\n                }\n            }`,\n            variables:{\n                imageId\n            }\n\n        }\n    }\n\n    try{\n\n        const response = await fetch('/graphql',{\n            method: 'POST',\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + token\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const resData = await response.json()\n        if(resData.errors){\n            if(resData.errors[0].status === 401){\n                throw Error('You are not authorized')\n            }\n            throw Error('Image not found')\n        }\n\n        //check if the resolve if for thump up mutation\n        if(thumpUpResolver){\n            dispatch(updateSingleImageThumpUp(resData))\n            dispatch(thumpUp(resData))\n        }else{\n            dispatch(updateSingleImageThumpDown(resData))\n            dispatch(thumpDown(resData))\n        }\n    }catch(error){\n        console.log(error)\n        //dispatch(thumpFail(error))\n    }\n}\n}\n\nexport default thumpThunk"]},"metadata":{},"sourceType":"module"}