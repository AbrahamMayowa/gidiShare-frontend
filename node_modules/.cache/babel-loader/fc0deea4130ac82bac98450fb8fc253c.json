{"ast":null,"code":"import { beginRefreshAuth, successRefreshAuth, failedRefreshAuth } from '../action/refreshAuth';\n\nconst fetchRefreshToken = (token, id) => {\n  return async dispatch => {\n    try {\n      dispatch(beginRefreshAuth());\n      const graphqlQuery = {\n        query: `\n            mutation refresh($refreshToken: String!, $userId: ID!){\n                refreshToken(resfreshToken: $refreshToken, userId: $userId){\n                    expiresIn\n                    token\n                    username\n                    imageUrl\n                }\n            }\n            `,\n        variables: {\n          refreshToken: token,\n          userId: id\n        }\n      };\n      const resFetch = await fetch('http://localhost:5000/graphql', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphqlQuery)\n      });\n      const data = await resFetch.json();\n      console.log(data);\n      console.log;\n\n      if (data.errors) {\n        console.log(data.errors);\n\n        if (data.errors[0].status === 401) {\n          throw new Error('Please log in to your account');\n        }\n\n        throw new Error('The login user is not exist');\n      }\n\n      dispatch(successRefreshAuth(data));\n    } catch (error) {\n      dispatch(failedRefreshAuth(error));\n    }\n  };\n};\n\nexport default fetchRefreshToken;","map":{"version":3,"sources":["/home/mayor/gidiShare2/frontend/src/redux/action/refreshTokenThunk.js"],"names":["beginRefreshAuth","successRefreshAuth","failedRefreshAuth","fetchRefreshToken","token","id","dispatch","graphqlQuery","query","variables","refreshToken","userId","resFetch","fetch","method","headers","body","JSON","stringify","data","json","console","log","errors","status","Error","error"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,kBAA1B,EAA8CC,iBAA9C,QAAsE,uBAAtE;;AAGA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,EAAR,KAAc;AACpC,SAAO,MAAOC,QAAP,IAAoB;AAEvB,QAAG;AACHA,MAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;AAEA,YAAMO,YAAY,GAAG;AACjBC,QAAAA,KAAK,EAAG;;;;;;;;;aADS;AAWjBC,QAAAA,SAAS,EAAE;AACPC,UAAAA,YAAY,EAAEN,KADP;AAEPO,UAAAA,MAAM,EAAEN;AAFD;AAXM,OAArB;AAgBA,YAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAAD,EAAkC;AAC1DC,QAAAA,MAAM,EAAE,MADkD;AAE1DC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAFiD;AAK1DC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,YAAf;AALoD,OAAlC,CAA5B;AAQA,YAAMY,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR;;AAEA,UAAGH,IAAI,CAACI,MAAR,EAAe;AACXF,QAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,MAAjB;;AACA,YAAGJ,IAAI,CAACI,MAAL,CAAY,CAAZ,EAAeC,MAAf,KAA0B,GAA7B,EAAiC;AAC7B,gBAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACH;;AACD,cAAM,IAAIA,KAAJ,CAAU,6BAAV,CAAN;AACH;;AAEDnB,MAAAA,QAAQ,CAACL,kBAAkB,CAACkB,IAAD,CAAnB,CAAR;AACH,KAxCG,CAwCH,OAAMO,KAAN,EAAY;AACTpB,MAAAA,QAAQ,CAACJ,iBAAiB,CAACwB,KAAD,CAAlB,CAAR;AACH;AACJ,GA7CG;AA8CH,CA/CD;;AAiDA,eAAevB,iBAAf","sourcesContent":["import {beginRefreshAuth, successRefreshAuth, failedRefreshAuth} from '../action/refreshAuth'\n\n\nconst fetchRefreshToken = (token, id) =>{\n    return async (dispatch) => {\n\n        try{\n        dispatch(beginRefreshAuth())\n\n        const graphqlQuery = {\n            query: `\n            mutation refresh($refreshToken: String!, $userId: ID!){\n                refreshToken(resfreshToken: $refreshToken, userId: $userId){\n                    expiresIn\n                    token\n                    username\n                    imageUrl\n                }\n            }\n            `,\n            variables: {\n                refreshToken: token,\n                userId: id\n            }\n        }\n        const resFetch = await fetch('http://localhost:5000/graphql', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const data = await resFetch.json()\n        console.log(data)\n        console.log\n\n        if(data.errors){\n            console.log(data.errors)\n            if(data.errors[0].status === 401){\n                throw new Error('Please log in to your account')\n            }\n            throw new Error('The login user is not exist')\n        }\n        \n        dispatch(successRefreshAuth(data))  \n    }catch(error){\n        dispatch(failedRefreshAuth(error))\n    }\n}\n}\n\nexport default fetchRefreshToken"]},"metadata":{},"sourceType":"module"}