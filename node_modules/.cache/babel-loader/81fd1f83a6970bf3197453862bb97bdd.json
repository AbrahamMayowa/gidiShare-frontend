{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/node_modules/@babel/runtime/regenerator\";import{createUserFailDispatch,createUserStartDispatch,createUserSuccessDispatch}from'./createUserAction';var createUserThunk=function createUserThunk(username,password,image){var formData=new FormData();formData.append('image',image);return function _callee(dispatch){var res,data,imageUrl,imagePath,graphqlQuery,graphResponse,queryResponseJson;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch(createUserStartDispatch());console.log('starting');_context.next=5;return _regeneratorRuntime.awrap(fetch('/api/create-user',{method:'POST',body:formData}));case 5:res=_context.sent;if(res.ok){_context.next=10;break;}if(!(res.status===422)){_context.next=9;break;}throw new Error('Invalid Input');case 9:throw new Error('An error occured');case 10:_context.next=12;return _regeneratorRuntime.awrap(res.json());case 12:data=_context.sent;imageUrl=data.imageUrl;imagePath=data.imagePath;graphqlQuery={query:\"\\n            mutation createFunc($username: String!, $password: String!, $imageUrl: String!, $imagePath: String!){\\n                createUser(userData: {username: $username, password: $password, imageUrl: $imageUrl, imagePath: $imagePath}){\\n                    token\\n                    refreshToken\\n                    userId\\n                    expiresIn\\n                    username\\n                    imageUrl\\n                }\\n            }\\n            \",variables:{username:username,password:password,imageUrl:imageUrl,imagePath:imagePath}};_context.next=18;return _regeneratorRuntime.awrap(fetch('/graphql',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(graphqlQuery)}));case 18:graphResponse=_context.sent;_context.next=21;return _regeneratorRuntime.awrap(graphResponse.json());case 21:queryResponseJson=_context.sent;if(!queryResponseJson.errors){_context.next=26;break;}if(!(queryResponseJson.errors[0].status===422)){_context.next=25;break;}throw new Error(queryResponseJson.errors[0].message);case 25:throw new Error('A server error occured!');case 26:dispatch(createUserSuccessDispatch(queryResponseJson));_context.next=32;break;case 29:_context.prev=29;_context.t0=_context[\"catch\"](0);dispatch(createUserFailDispatch(_context.t0));case 32:case\"end\":return _context.stop();}}},null,null,[[0,29]]);};};export default createUserThunk;","map":{"version":3,"sources":["/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/src/redux/action/createUserThunk.js"],"names":["createUserFailDispatch","createUserStartDispatch","createUserSuccessDispatch","createUserThunk","username","password","image","formData","FormData","append","dispatch","console","log","fetch","method","body","res","ok","status","Error","json","data","imageUrl","imagePath","graphqlQuery","query","variables","headers","JSON","stringify","graphResponse","queryResponseJson","errors","message"],"mappings":"uIAAA,OAAQA,sBAAR,CAAgCC,uBAAhC,CAAyDC,yBAAzD,KAAyF,oBAAzF,CAGA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,QAAD,CAAWC,QAAX,CAAqBC,KAArB,CAA8B,CAClD,GAAMC,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,QAAJ,EAAjB,CACAD,QAAQ,CAACE,MAAT,CAAgB,OAAhB,CAAyBH,KAAzB,EACA,MAAO,kBAAMI,QAAN,gNAEHA,QAAQ,CAACT,uBAAuB,EAAxB,CAAR,CACAU,OAAO,CAACC,GAAR,CAAY,UAAZ,EAHG,iDAIeC,KAAK,CAAC,kBAAD,CAAqB,CACxCC,MAAM,CAAE,MADgC,CAExCC,IAAI,CAAER,QAFkC,CAArB,CAJpB,SAIGS,GAJH,kBASCA,GAAG,CAACC,EATL,+BAUID,GAAG,CAACE,MAAJ,GAAe,GAVnB,+BAWW,IAAIC,CAAAA,KAAJ,CAAU,eAAV,CAXX,aAaO,IAAIA,CAAAA,KAAJ,CAAU,kBAAV,CAbP,2DAgBgBH,GAAG,CAACI,IAAJ,EAhBhB,UAgBGC,IAhBH,eAkBGC,QAlBH,CAkBcD,IAAI,CAACC,QAlBnB,CAmBGC,SAnBH,CAmBeF,IAAI,CAACE,SAnBpB,CAqBGC,YArBH,CAqBkB,CACjBC,KAAK,ydADY,CAajBC,SAAS,CAAE,CACPtB,QAAQ,CAARA,QADO,CAEPC,QAAQ,CAARA,QAFO,CAGPiB,QAAQ,CAARA,QAHO,CAIPC,SAAS,CAATA,SAJO,CAbM,CArBlB,mDA0CyBV,KAAK,CAAC,UAAD,CAAa,CAC1CC,MAAM,CAAE,MADkC,CAE1Ca,OAAO,CAAE,CACT,eAAgB,kBADP,CAFiC,CAK1CZ,IAAI,CAAEa,IAAI,CAACC,SAAL,CAAeL,YAAf,CALoC,CAAb,CA1C9B,UA0CGM,aA1CH,iEAkD6BA,aAAa,CAACV,IAAd,EAlD7B,UAkDGW,iBAlDH,mBAmDAA,iBAAiB,CAACC,MAnDlB,+BAoDID,iBAAiB,CAACC,MAAlB,CAAyB,CAAzB,EAA4Bd,MAA5B,GAAuC,GApD3C,gCAqDW,IAAIC,CAAAA,KAAJ,CAAUY,iBAAiB,CAACC,MAAlB,CAAyB,CAAzB,EAA4BC,OAAtC,CArDX,cAuDO,IAAId,CAAAA,KAAJ,CAAU,yBAAV,CAvDP,SA0DHT,QAAQ,CAACR,yBAAyB,CAAC6B,iBAAD,CAA1B,CAAR,CA1DG,iFA4DCrB,QAAQ,CAACV,sBAAsB,aAAvB,CAAR,CA5DD,kEAAP,CA+DH,CAlED,CAoEA,cAAeG,CAAAA,eAAf","sourcesContent":["import {createUserFailDispatch, createUserStartDispatch, createUserSuccessDispatch} from './createUserAction'\n\n\nconst createUserThunk = (username, password, image) =>{\n    const formData = new FormData()\n    formData.append('image', image)\n    return async dispatch => {\n        try{\n        dispatch(createUserStartDispatch())\n        console.log('starting')\n        const res = await fetch('/api/create-user', {\n            method: 'POST',\n            body: formData\n\n        })\n        if(!res.ok){\n            if(res.status === 422){\n                throw new Error('Invalid Input')\n            }\n            throw new Error('An error occured')\n        }\n\n        const data = await res.json()\n\n        const imageUrl = data.imageUrl\n        const imagePath = data.imagePath\n\n        const graphqlQuery = {\n            query: `\n            mutation createFunc($username: String!, $password: String!, $imageUrl: String!, $imagePath: String!){\n                createUser(userData: {username: $username, password: $password, imageUrl: $imageUrl, imagePath: $imagePath}){\n                    token\n                    refreshToken\n                    userId\n                    expiresIn\n                    username\n                    imageUrl\n                }\n            }\n            `,\n            variables: {\n                username,\n                password,\n                imageUrl,\n                imagePath,\n            }\n        }\n\n        const graphResponse = await fetch('/graphql', {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const queryResponseJson = await graphResponse.json()\n        if(queryResponseJson.errors){\n            if(queryResponseJson.errors[0].status === 422){\n                throw new Error(queryResponseJson.errors[0].message)\n            }\n            throw new Error('A server error occured!')\n        }\n\n        dispatch(createUserSuccessDispatch(queryResponseJson))\n        }catch(error){\n            dispatch(createUserFailDispatch(error))\n        }\n    }\n}\n\nexport default createUserThunk"]},"metadata":{},"sourceType":"module"}