{"ast":null,"code":"import { createUserFailDispatch, createUserStartDispatch, createUserSuccessDispatch } from './createUserAction';\n\nconst createUserThunk = (username, password, image) => {\n  const formData = new FormData();\n  formData.append('image', image);\n  return async dispatch => {\n    try {\n      dispatch(createUserStartDispatch());\n      console.log('starting');\n      const res = await fetch('http://localhost:5000/api/create-user', {\n        method: 'POST',\n        body: formData\n      });\n\n      if (!res.ok) {\n        if (res.status === 422) {\n          throw new Error('Invalid Input');\n        }\n\n        throw new Error('An error occured');\n      }\n\n      const data = await res.json();\n      const imageUrl = data.imageUrl;\n      const graphqlQuery = {\n        query: `\n            mutation createFunc($username: String!, $password: String!, $imageUrl: String!){\n                createUser(userData: {username: $username, password: $password, imageUrl: $imageUrl, imagePath: }){\n                    token\n                    refreshToken\n                    userId\n                    expiresIn\n                    username\n                    imageUrl\n                }\n            }\n            `,\n        variables: {\n          username: username,\n          password: password,\n          imageUrl: imageUrl\n        }\n      };\n      const graphResponse = await fetch('http://localhost:5000/graphql', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphqlQuery)\n      });\n      const queryResponseJson = await graphResponse.json();\n      console.log(queryResponseJson);\n\n      if (queryResponseJson.errors) {\n        if (queryResponseJson.errors[0].status === 422) {\n          throw new Error(queryResponseJson.errors[0].message);\n        }\n\n        throw new Error('A server error occured!');\n      }\n\n      dispatch(createUserSuccessDispatch(queryResponseJson));\n      console.log(queryResponseJson);\n    } catch (error) {\n      dispatch(createUserFailDispatch(error));\n      console.log('saved');\n    }\n  };\n};\n\nexport default createUserThunk;","map":{"version":3,"sources":["/home/mayor/gidiShare2/frontend/src/redux/action/createUserThunk.js"],"names":["createUserFailDispatch","createUserStartDispatch","createUserSuccessDispatch","createUserThunk","username","password","image","formData","FormData","append","dispatch","console","log","res","fetch","method","body","ok","status","Error","data","json","imageUrl","graphqlQuery","query","variables","graphResponse","headers","JSON","stringify","queryResponseJson","errors","message","error"],"mappings":"AAAA,SAAQA,sBAAR,EAAgCC,uBAAhC,EAAyDC,yBAAzD,QAAyF,oBAAzF;;AAGA,MAAMC,eAAe,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,KAArB,KAA8B;AAClD,QAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,EAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBH,KAAzB;AACA,SAAO,MAAMI,QAAN,IAAkB;AACrB,QAAG;AACHA,MAAAA,QAAQ,CAACT,uBAAuB,EAAxB,CAAR;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,uCAAD,EAA0C;AAC7DC,QAAAA,MAAM,EAAE,MADqD;AAE7DC,QAAAA,IAAI,EAAET;AAFuD,OAA1C,CAAvB;;AAKA,UAAG,CAACM,GAAG,CAACI,EAAR,EAAW;AACP,YAAGJ,GAAG,CAACK,MAAJ,KAAe,GAAlB,EAAsB;AAClB,gBAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACH;;AACD,cAAM,IAAIA,KAAJ,CAAU,kBAAV,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAJ,EAAnB;AAEA,YAAMC,QAAQ,GAAGF,IAAI,CAACE,QAAtB;AAEA,YAAMC,YAAY,GAAG;AACjBC,QAAAA,KAAK,EAAG;;;;;;;;;;;aADS;AAajBC,QAAAA,SAAS,EAAE;AACPrB,UAAAA,QAAQ,EAAEA,QADH;AAEPC,UAAAA,QAAQ,EAAEA,QAFH;AAGPiB,UAAAA,QAAQ,EAAEA;AAHH;AAbM,OAArB;AAoBA,YAAMI,aAAa,GAAG,MAAMZ,KAAK,CAAC,+BAAD,EAAkC;AAC/DC,QAAAA,MAAM,EAAE,MADuD;AAE/DY,QAAAA,OAAO,EAAE;AACT,0BAAgB;AADP,SAFsD;AAK/DX,QAAAA,IAAI,EAAEY,IAAI,CAACC,SAAL,CAAeN,YAAf;AALyD,OAAlC,CAAjC;AAQA,YAAMO,iBAAiB,GAAG,MAAMJ,aAAa,CAACL,IAAd,EAAhC;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYkB,iBAAZ;;AACA,UAAGA,iBAAiB,CAACC,MAArB,EAA4B;AACxB,YAAGD,iBAAiB,CAACC,MAAlB,CAAyB,CAAzB,EAA4Bb,MAA5B,KAAuC,GAA1C,EAA8C;AAC1C,gBAAM,IAAIC,KAAJ,CAAUW,iBAAiB,CAACC,MAAlB,CAAyB,CAAzB,EAA4BC,OAAtC,CAAN;AACH;;AACD,cAAM,IAAIb,KAAJ,CAAU,yBAAV,CAAN;AACH;;AAEDT,MAAAA,QAAQ,CAACR,yBAAyB,CAAC4B,iBAAD,CAA1B,CAAR;AACAnB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,iBAAZ;AACC,KA1DD,CA0DC,OAAMG,KAAN,EAAY;AACTvB,MAAAA,QAAQ,CAACV,sBAAsB,CAACiC,KAAD,CAAvB,CAAR;AACAtB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,GA/DD;AAgEH,CAnED;;AAqEA,eAAeT,eAAf","sourcesContent":["import {createUserFailDispatch, createUserStartDispatch, createUserSuccessDispatch} from './createUserAction'\n\n\nconst createUserThunk = (username, password, image) =>{\n    const formData = new FormData()\n    formData.append('image', image)\n    return async dispatch => {\n        try{\n        dispatch(createUserStartDispatch())\n        console.log('starting')\n        const res = await fetch('http://localhost:5000/api/create-user', {\n            method: 'POST',\n            body: formData\n\n        })\n        if(!res.ok){\n            if(res.status === 422){\n                throw new Error('Invalid Input')\n            }\n            throw new Error('An error occured')\n        }\n\n        const data = await res.json()\n\n        const imageUrl = data.imageUrl\n\n        const graphqlQuery = {\n            query: `\n            mutation createFunc($username: String!, $password: String!, $imageUrl: String!){\n                createUser(userData: {username: $username, password: $password, imageUrl: $imageUrl, imagePath: }){\n                    token\n                    refreshToken\n                    userId\n                    expiresIn\n                    username\n                    imageUrl\n                }\n            }\n            `,\n            variables: {\n                username: username,\n                password: password,\n                imageUrl: imageUrl\n            }\n        }\n\n        const graphResponse = await fetch('http://localhost:5000/graphql', {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const queryResponseJson = await graphResponse.json()\n        console.log(queryResponseJson)\n        if(queryResponseJson.errors){\n            if(queryResponseJson.errors[0].status === 422){\n                throw new Error(queryResponseJson.errors[0].message)\n            }\n            throw new Error('A server error occured!')\n        }\n\n        dispatch(createUserSuccessDispatch(queryResponseJson))\n        console.log(queryResponseJson)\n        }catch(error){\n            dispatch(createUserFailDispatch(error))\n            console.log('saved')\n        }\n    }\n}\n\nexport default createUserThunk"]},"metadata":{},"sourceType":"module"}