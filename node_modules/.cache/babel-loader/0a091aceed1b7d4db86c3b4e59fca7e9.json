{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/node_modules/@babel/runtime/regenerator\";import{logoutFail,logoutSuccess,logoutStart}from'./logout';var logoutDispatch=function logoutDispatch(token){return function _callee(dispatch){var graphqlQuery,fetchResponse,resData;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:graphqlQuery={query:\"\\n            mutation {\\n                logout\\n            }\"};_context.prev=1;dispatch(logoutStart());_context.next=5;return _regeneratorRuntime.awrap(fetch('/graphql',{method:'POST',headers:{'Content-Type':'application/json',Authorization:'Bearer '+token},body:JSON.stringify(graphqlQuery)}));case 5:fetchResponse=_context.sent;_context.next=8;return _regeneratorRuntime.awrap(fetchResponse.json());case 8:resData=_context.sent;if(!resData.errors){_context.next=13;break;}if(!(resData.errors[0].status===401)){_context.next=12;break;}throw Error('You are not authorized');case 12:throw Error('User not found');case 13:dispatch(logoutSuccess(resData));_context.next=19;break;case 16:_context.prev=16;_context.t0=_context[\"catch\"](1);dispatch(logoutFail(_context.t0));case 19:case\"end\":return _context.stop();}}},null,null,[[1,16]]);};};export default logoutDispatch;","map":{"version":3,"sources":["/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/src/redux/action/logoutThunk.js"],"names":["logoutFail","logoutSuccess","logoutStart","logoutDispatch","token","dispatch","graphqlQuery","query","fetch","method","headers","Authorization","body","JSON","stringify","fetchResponse","json","resData","errors","status","Error"],"mappings":"uIAAA,OAAQA,UAAR,CAAoBC,aAApB,CAAmCC,WAAnC,KAAqD,UAArD,CAGA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAAS,CAC5B,MAAO,kBAAMC,QAAN,0JACGC,YADH,CACkB,CACjBC,KAAK,kEADY,CADlB,iBASCF,QAAQ,CAACH,WAAW,EAAZ,CAAR,CATD,iDAUqBM,KAAK,CAAC,UAAD,CAAa,CAC1CC,MAAM,CAAE,MADkC,CAE1CC,OAAO,CAAE,CACL,eAAgB,kBADX,CAELC,aAAa,CAAE,UAAYP,KAFtB,CAFiC,CAM1CQ,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeR,YAAf,CANoC,CAAb,CAV1B,SAUDS,aAVC,gEAkBeA,aAAa,CAACC,IAAd,EAlBf,SAkBDC,OAlBC,mBAmBJA,OAAO,CAACC,MAnBJ,+BAoBJD,OAAO,CAACC,MAAR,CAAe,CAAf,EAAkBC,MAAlB,GAA6B,GApBzB,gCAqBGC,CAAAA,KAAK,CAAC,wBAAD,CArBR,cAuBDA,CAAAA,KAAK,CAAC,gBAAD,CAvBJ,SAyBPf,QAAQ,CAACJ,aAAa,CAACgB,OAAD,CAAd,CAAR,CAzBO,iFA2BHZ,QAAQ,CAACL,UAAU,aAAX,CAAR,CA3BG,kEAAP,CA+BH,CAhCD,CAkCA,cAAeG,CAAAA,cAAf","sourcesContent":["import {logoutFail, logoutSuccess, logoutStart} from './logout'\n\n\nconst logoutDispatch = (token)=>{\n    return async dispatch =>{\n        const graphqlQuery = {\n            query: `\n            mutation {\n                logout\n            }`\n        }\n\n        try{\n            dispatch(logoutStart())\n    const fetchResponse = await fetch('/graphql', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token   \n        },\n        body: JSON.stringify(graphqlQuery)\n    })\n    const resData = await fetchResponse.json()\n    if(resData.errors){\n    if(resData.errors[0].status === 401){\n        throw Error('You are not authorized')\n    }\n    throw Error('User not found')\n    }\n    dispatch(logoutSuccess(resData))\n    }catch(error){\n        dispatch(logoutFail(error))\n    }\n\n    }\n}\n\nexport default logoutDispatch"]},"metadata":{},"sourceType":"module"}