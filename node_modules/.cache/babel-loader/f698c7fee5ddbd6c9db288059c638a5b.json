{"ast":null,"code":"import { thumpDown, thumpUp, updateSingleImageThumpDown, updateSingleImageThumpUp } from './thumpAction';\n\nconst thumpThunk = (imageId, token, thumpUpResolver = true) => {\n  return async dispatch => {\n    //dispatch(thumpBegin())\n    // thumpUpResolver is true if the thunk will make a fetch request to thumpUpMutation\n    let graphqlQuery;\n\n    if (thumpUpResolver) {\n      graphqlQuery = {\n        query: `\n            mutation thumpUp($imageId: ID!){\n                thumpUpMutation(imageId: $imageId){\n                    thumpUp{\n                        thumpUpCount\n                        userActionThumpUp{\n                            _id\n                        }\n                    }\n\n                    imageId\n                    thumpDown{\n                        thumpDownCount\n                        userActionThumpDown{\n                            _id\n                        }\n                    }\n\n                }\n            }`,\n        variables: {\n          imageId: imageId\n        }\n      };\n    } else {\n      graphqlQuery = {\n        query: `\n            mutation thumpDown($imageId: ID!){\n                thumpDownMutation(imageId: $imageId){\n                    thumpUp{\n                        thumpUpCount\n                        userActionThumpUp{\n                            _id\n                        }\n                    }\n                    imageId\n                    thumpDown{\n                        thumpDownCount\n                        userActionThumpDown{\n                            _id\n                        }\n                    }\n\n                }\n            }`,\n        variables: {\n          imageId\n        }\n      };\n    }\n\n    try {\n      const response = await fetch('http://localhost:5000/graphql', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        },\n        body: JSON.stringify(graphqlQuery)\n      });\n      const resData = await response.json();\n\n      if (resData.errors) {\n        if (resData.errors[0].status === 401) {\n          throw Error('You are not authorized');\n        }\n\n        throw Error('Image not found');\n      } //check if the resolve if for thump up mutation\n\n\n      if (thumpUpResolver) {\n        dispatch(updateSingleImageThumpUp(resData));\n        dispatch(thumpUp(resData));\n      } else {\n        dispatch(updateSingleImageThumpDown(resData));\n        dispatch(thumpDown(resData));\n      }\n    } catch (error) {\n      console.log(error); //dispatch(thumpFail(error))\n    }\n  };\n};\n\nexport default thumpThunk;","map":{"version":3,"sources":["/home/mayor/gidiShare2/frontend/src/redux/action/thumpThunk.js"],"names":["thumpDown","thumpUp","updateSingleImageThumpDown","updateSingleImageThumpUp","thumpThunk","imageId","token","thumpUpResolver","dispatch","graphqlQuery","query","variables","response","fetch","method","headers","Authorization","body","JSON","stringify","resData","json","errors","status","Error","error","console","log"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,OAAnB,EAA4BC,0BAA5B,EAAwDC,wBAAxD,QAAuF,eAAvF;;AAGA,MAAMC,UAAU,GAAG,CAACC,OAAD,EAAUC,KAAV,EAAiBC,eAAe,GAAG,IAAnC,KAA0C;AAEzD,SAAO,MAAMC,QAAN,IAAiB;AACpB;AAEJ;AACA,QAAIC,YAAJ;;AAEA,QAAGF,eAAH,EAAmB;AACfE,MAAAA,YAAY,GAAG;AACXC,QAAAA,KAAK,EAAG;;;;;;;;;;;;;;;;;;;cADG;AAqBXC,QAAAA,SAAS,EAAC;AACNN,UAAAA,OAAO,EAACA;AADF;AArBC,OAAf;AA0BH,KA3BD,MA2BK;AACDI,MAAAA,YAAY,GAAG;AACXC,QAAAA,KAAK,EAAG;;;;;;;;;;;;;;;;;;cADG;AAoBXC,QAAAA,SAAS,EAAC;AACNN,UAAAA;AADM;AApBC,OAAf;AAyBH;;AAED,QAAG;AAEC,YAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAAD,EAAiC;AACzDC,QAAAA,MAAM,EAAE,MADiD;AAEzDC,QAAAA,OAAO,EAAC;AACJ,0BAAgB,kBADZ;AAEJC,UAAAA,aAAa,EAAE,YAAYV;AAFvB,SAFiD;AAMzDW,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,YAAf;AANmD,OAAjC,CAA5B;AASA,YAAMW,OAAO,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAtB;;AACA,UAAGD,OAAO,CAACE,MAAX,EAAkB;AACd,YAAGF,OAAO,CAACE,MAAR,CAAe,CAAf,EAAkBC,MAAlB,KAA6B,GAAhC,EAAoC;AAChC,gBAAMC,KAAK,CAAC,wBAAD,CAAX;AACH;;AACD,cAAMA,KAAK,CAAC,iBAAD,CAAX;AACH,OAjBF,CAmBC;;;AACA,UAAGjB,eAAH,EAAmB;AACfC,QAAAA,QAAQ,CAACL,wBAAwB,CAACiB,OAAD,CAAzB,CAAR;AACAZ,QAAAA,QAAQ,CAACP,OAAO,CAACmB,OAAD,CAAR,CAAR;AACH,OAHD,MAGK;AACDZ,QAAAA,QAAQ,CAACN,0BAA0B,CAACkB,OAAD,CAA3B,CAAR;AACAZ,QAAAA,QAAQ,CAACR,SAAS,CAACoB,OAAD,CAAV,CAAR;AACH;AACJ,KA3BD,CA2BC,OAAMK,KAAN,EAAY;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADS,CAET;AACH;AACJ,GA5FG;AA6FH,CA/FD;;AAiGA,eAAerB,UAAf","sourcesContent":["import {thumpDown, thumpUp, updateSingleImageThumpDown, updateSingleImageThumpUp} from './thumpAction'\n\n\nconst thumpThunk = (imageId, token, thumpUpResolver = true)=>{\n\n    return async dispatch =>{ \n        //dispatch(thumpBegin())\n\n    // thumpUpResolver is true if the thunk will make a fetch request to thumpUpMutation\n    let graphqlQuery\n\n    if(thumpUpResolver){\n        graphqlQuery = {\n            query: `\n            mutation thumpUp($imageId: ID!){\n                thumpUpMutation(imageId: $imageId){\n                    thumpUp{\n                        thumpUpCount\n                        userActionThumpUp{\n                            _id\n                        }\n                    }\n\n                    imageId\n                    thumpDown{\n                        thumpDownCount\n                        userActionThumpDown{\n                            _id\n                        }\n                    }\n\n                }\n            }`,\n            variables:{\n                imageId:imageId\n            }\n        }\n\n    }else{\n        graphqlQuery = {\n            query: `\n            mutation thumpDown($imageId: ID!){\n                thumpDownMutation(imageId: $imageId){\n                    thumpUp{\n                        thumpUpCount\n                        userActionThumpUp{\n                            _id\n                        }\n                    }\n                    imageId\n                    thumpDown{\n                        thumpDownCount\n                        userActionThumpDown{\n                            _id\n                        }\n                    }\n\n                }\n            }`,\n            variables:{\n                imageId\n            }\n\n        }\n    }\n\n    try{\n\n        const response = await fetch('http://localhost:5000/graphql',{\n            method: 'POST',\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + token\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const resData = await response.json()\n        if(resData.errors){\n            if(resData.errors[0].status === 401){\n                throw Error('You are not authorized')\n            }\n            throw Error('Image not found')\n        }\n\n        //check if the resolve if for thump up mutation\n        if(thumpUpResolver){\n            dispatch(updateSingleImageThumpUp(resData))\n            dispatch(thumpUp(resData))\n        }else{\n            dispatch(updateSingleImageThumpDown(resData))\n            dispatch(thumpDown(resData))\n        }\n    }catch(error){\n        console.log(error)\n        //dispatch(thumpFail(error))\n    }\n}\n}\n\nexport default thumpThunk"]},"metadata":{},"sourceType":"module"}