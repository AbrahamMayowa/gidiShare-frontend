{"ast":null,"code":"import { createStore, combineReducers } from 'redux';\nimport appleMiddleware from 'redux-thunk';\nimport thunk from 'redux-thunk';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { auth } from './reducer/authReducer';\nimport images from './reducer/images';\nimport singleImage from './reducer/singleImageReducer'; // the combine reducers\n\nconst reducers = combineReducers({\n  auth: auth,\n  images: images,\n  singleImage: singleImage\n});\nconst persistConfig = {\n  key: 'root',\n  //using localstorage\n  storage,\n  //only the auth reducer will be persisted\n  whitelist: ['auth']\n};\nconst persistedReducer = persistReducer(persistConfig, reducers);\nexport default (() => {\n  let store = createStore(persistedReducer, appleMiddleware(thunk));\n  let persistor = persistStore(store);\n  return {\n    store,\n    persistor\n  };\n});","map":{"version":3,"sources":["/home/mayor/gidiShare2/frontend/src/redux/store.js"],"names":["createStore","combineReducers","appleMiddleware","thunk","persistReducer","persistStore","storage","auth","images","singleImage","reducers","persistConfig","key","whitelist","persistedReducer","store","persistor"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,cAAR,EAAwBC,YAAxB,QAA2C,eAA3C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAAQC,IAAR,QAAmB,uBAAnB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,WAAP,MAAwB,8BAAxB,C,CAGA;;AACA,MAAMC,QAAQ,GAAGT,eAAe,CAAC;AAC7BM,EAAAA,IAAI,EAAEA,IADuB;AAE7BC,EAAAA,MAAM,EAAEA,MAFqB;AAG7BC,EAAAA,WAAW,EAAEA;AAHgB,CAAD,CAAhC;AAMA,MAAME,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElB;AACAN,EAAAA,OAHkB;AAIlB;AACAO,EAAAA,SAAS,EAAE,CAAC,MAAD;AALO,CAAtB;AAQA,MAAMC,gBAAgB,GAAGV,cAAc,CAACO,aAAD,EAAgBD,QAAhB,CAAvC;AAEA,gBAAe,MAAM;AACjB,MAAIK,KAAK,GAAGf,WAAW,CAACc,gBAAD,EAAmBZ,eAAe,CAACC,KAAD,CAAlC,CAAvB;AACA,MAAIa,SAAS,GAAGX,YAAY,CAACU,KAAD,CAA5B;AACA,SAAO;AAACA,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAP;AAGH,CAND","sourcesContent":["import {createStore, combineReducers} from 'redux'\nimport appleMiddleware from 'redux-thunk'\nimport thunk from 'redux-thunk'\nimport {persistReducer, persistStore} from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport {auth} from './reducer/authReducer'\nimport images from './reducer/images'\nimport singleImage from './reducer/singleImageReducer'\n\n\n// the combine reducers\nconst reducers = combineReducers({\n    auth: auth,\n    images: images,\n    singleImage: singleImage\n})\n\nconst persistConfig = {\n    key: 'root',\n    //using localstorage\n    storage,\n    //only the auth reducer will be persisted\n    whitelist: ['auth']\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducers)\n\nexport default () => {\n    let store = createStore(persistedReducer, appleMiddleware(thunk))\n    let persistor = persistStore(store)\n    return {store, persistor}\n\n\n}\n\n"]},"metadata":{},"sourceType":"module"}