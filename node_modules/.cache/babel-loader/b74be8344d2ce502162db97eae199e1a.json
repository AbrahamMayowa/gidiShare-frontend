{"ast":null,"code":"import { uploadFail, uploadStarts, uploadSuccess } from './uploadAction';\n\nconst uploadThunk = (image, description, category, token) => {\n  return async dispatch => {\n    try {\n      dispatch(uploadStarts());\n      const formData = new FormData();\n      formData.append('image', image);\n      const imageFileSave = await fetch('http://localhost:5000/api/upload', {\n        method: 'PUT',\n        headers: {\n          Authorization: 'Bearer ' + token\n        },\n        body: formData\n      });\n\n      if (!imageFileSave.ok) {\n        if (imageFileSave.status === 401) {\n          throw new Error('Please log in to upload image');\n        }\n\n        throw new Error('A server error occured');\n      }\n\n      const imageData = await imageFileSave.json(); // the graphql for storing the image in the db\n\n      const graphqlQuery = {\n        query: `\n            mutation uploadMutation($imageUrl: String!, $description: String!, $category: String!){\n                uploadImage(imageUrl: $imageUrl, description: $description, category: $category){\n                    imageUrl\n                    imageId\n                }\n            }`,\n        variables: {\n          imageUrl: imageData.imageUrl,\n          description: description,\n          category: category\n        }\n      };\n      console.log(graphqlQuery);\n      const graphqlResponse = await fetch('http://localhost:5000/graphql', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer ' + token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphqlQuery)\n      });\n      const resData = await graphqlResponse.json();\n      console.log(resData);\n\n      if (resData.errors) {\n        if (resData.errors[0].status === 401) {\n          throw new Error('You need to log in');\n        }\n\n        throw new Error('Please provide valid input');\n      }\n\n      dispatch(uploadSuccess(resData));\n    } catch (error) {\n      console.log(error);\n      dispatch(uploadFail(error));\n    }\n  };\n};\n\nexport default uploadThunk;","map":{"version":3,"sources":["/home/mayor/gidiShare2/frontend/src/redux/action/uploadThunk.js"],"names":["uploadFail","uploadStarts","uploadSuccess","uploadThunk","image","description","category","token","dispatch","formData","FormData","append","imageFileSave","fetch","method","headers","Authorization","body","ok","status","Error","imageData","json","graphqlQuery","query","variables","imageUrl","console","log","graphqlResponse","JSON","stringify","resData","errors","error"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,YAApB,EAAkCC,aAAlC,QAAsD,gBAAtD;;AAGA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,WAAR,EAAqBC,QAArB,EAA+BC,KAA/B,KAA0C;AAC1D,SAAO,MAAMC,QAAN,IAAkB;AACrB,QAAG;AACHA,MAAAA,QAAQ,CAACP,YAAY,EAAb,CAAR;AACA,YAAMQ,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBP,KAAzB;AACA,YAAMQ,aAAa,GAAG,MAAMC,KAAK,CAAC,kCAAD,EAAqC;AAClEC,QAAAA,MAAM,EAAE,KAD0D;AAElEC,QAAAA,OAAO,EAAE;AACLC,UAAAA,aAAa,EAAE,YAAYT;AADtB,SAFyD;AAKlEU,QAAAA,IAAI,EAAER;AAL4D,OAArC,CAAjC;;AASA,UAAG,CAACG,aAAa,CAACM,EAAlB,EAAqB;AACjB,YAAGN,aAAa,CAACO,MAAd,KAAyB,GAA5B,EAAgC;AAC5B,gBAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACH;;AACD,cAAM,IAAIA,KAAJ,CAAU,wBAAV,CAAN;AACH;;AAED,YAAMC,SAAS,GAAG,MAAMT,aAAa,CAACU,IAAd,EAAxB,CApBG,CAsBH;;AACA,YAAMC,YAAY,GAAG;AACjBC,QAAAA,KAAK,EAAG;;;;;;cADS;AAQjBC,QAAAA,SAAS,EAAE;AACPC,UAAAA,QAAQ,EAAEL,SAAS,CAACK,QADb;AAEPrB,UAAAA,WAAW,EAAEA,WAFN;AAGPC,UAAAA,QAAQ,EAAEA;AAHH;AARM,OAArB;AAeAqB,MAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ;AACA,YAAMM,eAAe,GAAG,MAAMhB,KAAK,CAAC,+BAAD,EAAkC;AACjEC,QAAAA,MAAM,EAAE,MADyD;AAEjEC,QAAAA,OAAO,EAAE;AACLC,UAAAA,aAAa,EAAE,YAAYT,KADtB;AAEL,0BAAgB;AAFX,SAFwD;AAMjEU,QAAAA,IAAI,EAAEa,IAAI,CAACC,SAAL,CAAeR,YAAf;AAN2D,OAAlC,CAAnC;AASA,YAAMS,OAAO,GAAG,MAAMH,eAAe,CAACP,IAAhB,EAAtB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYI,OAAZ;;AACA,UAAGA,OAAO,CAACC,MAAX,EAAkB;AACd,YAAGD,OAAO,CAACC,MAAR,CAAe,CAAf,EAAkBd,MAAlB,KAA6B,GAAhC,EAAoC;AAChC,gBAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACH;;AACD,cAAM,IAAIA,KAAJ,CAAU,4BAAV,CAAN;AACH;;AAEDZ,MAAAA,QAAQ,CAACN,aAAa,CAAC8B,OAAD,CAAd,CAAR;AACH,KA1DG,CA0DH,OAAME,KAAN,EAAY;AACTP,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACA1B,MAAAA,QAAQ,CAACR,UAAU,CAACkC,KAAD,CAAX,CAAR;AACH;AAGA,GAjED;AAkEH,CAnED;;AAqEA,eAAe/B,WAAf","sourcesContent":["import {uploadFail, uploadStarts, uploadSuccess} from './uploadAction'\n\n\nconst uploadThunk = (image, description, category, token) =>  {\n    return async dispatch => {\n        try{\n        dispatch(uploadStarts())\n        const formData = new FormData()\n        formData.append('image', image)\n        const imageFileSave = await fetch('http://localhost:5000/api/upload', {\n            method: 'PUT',\n            headers: {\n                Authorization: 'Bearer ' + token\n            },\n            body: formData\n\n        })\n\n        if(!imageFileSave.ok){\n            if(imageFileSave.status === 401){\n                throw new Error('Please log in to upload image')\n            }\n            throw new Error('A server error occured')\n        }\n\n        const imageData = await imageFileSave.json()\n\n        // the graphql for storing the image in the db\n        const graphqlQuery = {\n            query: `\n            mutation uploadMutation($imageUrl: String!, $description: String!, $category: String!){\n                uploadImage(imageUrl: $imageUrl, description: $description, category: $category){\n                    imageUrl\n                    imageId\n                }\n            }`,\n            variables: {\n                imageUrl: imageData.imageUrl,\n                description: description,\n                category: category\n            }\n        }\n\n        console.log(graphqlQuery)\n        const graphqlResponse = await fetch('http://localhost:5000/graphql', {\n            method: 'POST',\n            headers: {\n                Authorization: 'Bearer ' + token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const resData = await graphqlResponse.json()\n        console.log(resData)\n        if(resData.errors){\n            if(resData.errors[0].status === 401){\n                throw new Error('You need to log in')\n            }\n            throw new Error('Please provide valid input')\n        }\n\n        dispatch(uploadSuccess(resData))\n    }catch(error){\n        console.log(error)\n        dispatch(uploadFail(error))\n    }\n\n\n    }\n}\n\nexport default uploadThunk"]},"metadata":{},"sourceType":"module"}