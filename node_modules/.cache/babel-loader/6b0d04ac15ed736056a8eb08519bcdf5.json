{"ast":null,"code":"import { failFetchList, startFetchList, successFetchList } from './imageListAction';\n\nconst imageListThunk = () => {\n  return async dispatch => {\n    try {\n      dispatch(startFetchList());\n      const graphqlQuery = {\n        query: `\n            query images{\n                imageList {\n                    imageUrl\n                    creator {\n                        username\n                        imageUrl\n                    }\n                    description\n                    category\n                    createdAt\n                    thumpUp {\n                        thumpUpCount\n                        userActionThumpUp {\n                            _id\n                        }\n                    }\n                    \n                    thumpDown {\n                        thumpDownCount\n                        userActionThumpDown {\n                            _id\n                        }\n                    }\n\n                }\n\n            }\n            `\n      };\n      const response = await fetch('http://localhost:5000/graphql', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphqlQuery)\n      });\n      const resData = await response.json();\n      console;\n\n      if (resData.errors) {\n        if (resData.errors[0].status === 404) {\n          throw new Error('No image found');\n        }\n\n        throw new Error('A server error occured');\n      }\n\n      dispatch(successFetchList(resData)); //console.log(resData)\n    } catch (error) {\n      dispatch(failFetchList(error));\n      console.log(error);\n    }\n  };\n};\n\nexport default imageListThunk;","map":{"version":3,"sources":["/home/mayor/gidiShare2/frontend/src/redux/action/imageListActionThunk.js"],"names":["failFetchList","startFetchList","successFetchList","imageListThunk","dispatch","graphqlQuery","query","response","fetch","method","headers","body","JSON","stringify","resData","json","console","errors","status","Error","error","log"],"mappings":"AAAA,SAAQA,aAAR,EAAuBC,cAAvB,EAAuCC,gBAAvC,QAA8D,mBAA9D;;AAEA,MAAMC,cAAc,GAAG,MAAM;AACzB,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAG;AACHA,MAAAA,QAAQ,CAACH,cAAc,EAAf,CAAR;AACA,YAAMI,YAAY,GAAG;AACjBC,QAAAA,KAAK,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADS,OAArB;AA+BA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAAD,EAAkC;AAC1DC,QAAAA,MAAM,EAAE,MADkD;AAE1DC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAFiD;AAK1DC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,YAAf;AALoD,OAAlC,CAA5B;AAQA,YAAMS,OAAO,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAtB;AACAC,MAAAA,OAAO;;AAEP,UAAGF,OAAO,CAACG,MAAX,EAAkB;AACd,YAAGH,OAAO,CAACG,MAAR,CAAe,CAAf,EAAkBC,MAAlB,KAA6B,GAAhC,EAAoC;AAChC,gBAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACH;;AACD,cAAM,IAAIA,KAAJ,CAAU,wBAAV,CAAN;AACH;;AAEDf,MAAAA,QAAQ,CAACF,gBAAgB,CAACY,OAAD,CAAjB,CAAR,CAnDG,CAoDH;AACH,KArDG,CAqDH,OAAMM,KAAN,EAAY;AACThB,MAAAA,QAAQ,CAACJ,aAAa,CAACoB,KAAD,CAAd,CAAR;AACAJ,MAAAA,OAAO,CAACK,GAAR,CAAYD,KAAZ;AACH;AAIA,GA7DD;AA8DH,CA/DD;;AAiEA,eAAejB,cAAf","sourcesContent":["import {failFetchList, startFetchList, successFetchList} from './imageListAction'\n\nconst imageListThunk = () => {\n    return async (dispatch) => {\n        try{\n        dispatch(startFetchList())\n        const graphqlQuery = {\n            query: `\n            query images{\n                imageList {\n                    imageUrl\n                    creator {\n                        username\n                        imageUrl\n                    }\n                    description\n                    category\n                    createdAt\n                    thumpUp {\n                        thumpUpCount\n                        userActionThumpUp {\n                            _id\n                        }\n                    }\n                    \n                    thumpDown {\n                        thumpDownCount\n                        userActionThumpDown {\n                            _id\n                        }\n                    }\n\n                }\n\n            }\n            `\n        }\n        const response = await fetch('http://localhost:5000/graphql', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const resData = await response.json()\n        console\n\n        if(resData.errors){\n            if(resData.errors[0].status === 404){\n                throw new Error('No image found')\n            }\n            throw new Error('A server error occured')\n        }\n\n        dispatch(successFetchList(resData))\n        //console.log(resData)\n    }catch(error){\n        dispatch(failFetchList(error))\n        console.log(error)\n    }\n\n\n\n    } \n}\n\nexport default imageListThunk"]},"metadata":{},"sourceType":"module"}