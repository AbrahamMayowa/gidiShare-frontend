{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/node_modules/@babel/runtime/regenerator\";import{singleImageFails,singleImageStarts,singleImageSuccess}from'./singleImage';var singleImageFetch=function singleImageFetch(id){return function _callee(dispatch){var graphqlQuery,response,data;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch(singleImageStarts());graphqlQuery={query:\"\\n            query single($_id: ID!){\\n                singleImage(_id: $_id){\\n                    imageUrl\\n                    imageId\\n                    creator {\\n                        username\\n                        imageUrl\\n                    }\\n                    description\\n                    category\\n                    createdAt\\n                    thumpUp {\\n                        thumpUpCount\\n                        userActionThumpUp {\\n                            _id\\n                        }\\n                    }\\n                    thumpDown {\\n                        thumpDownCount\\n                        userActionThumpDown{\\n                            _id\\n                        }\\n                    }  \\n                }\\n            }\",variables:{_id:id}};_context.next=5;return _regeneratorRuntime.awrap(fetch('/graphql',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(graphqlQuery)}));case 5:response=_context.sent;_context.next=8;return _regeneratorRuntime.awrap(response.json());case 8:data=_context.sent;if(!data.errors){_context.next=13;break;}if(!(data.errors[0].status===404)){_context.next=12;break;}throw new Error('The selected image is not found');case 12:throw new Error('A server error occured');case 13:dispatch(singleImageSuccess(data));_context.next=19;break;case 16:_context.prev=16;_context.t0=_context[\"catch\"](0);dispatch(singleImageFails(_context.t0));case 19:case\"end\":return _context.stop();}}},null,null,[[0,16]]);};};export default singleImageFetch;","map":{"version":3,"sources":["/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/src/redux/action/singleImageThunk.js"],"names":["singleImageFails","singleImageStarts","singleImageSuccess","singleImageFetch","id","dispatch","graphqlQuery","query","variables","_id","fetch","method","headers","body","JSON","stringify","response","json","data","errors","status","Error"],"mappings":"uIAAA,OAAQA,gBAAR,CAA0BC,iBAA1B,CAA6CC,kBAA7C,KAAsE,eAAtE,CAGA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAAC,EAAE,CAAG,CAC1B,MAAO,kBAAMC,QAAN,kKAEHA,QAAQ,CAACJ,iBAAiB,EAAlB,CAAR,CAEMK,YAJH,CAIkB,CACjBC,KAAK,wxBADY,CA2BjBC,SAAS,CAAE,CACPC,GAAG,CAAEL,EADE,CA3BM,CAJlB,kDAoCoBM,KAAK,CAAC,UAAD,CAAY,CACpCC,MAAM,CAAC,MAD6B,CAEpCC,OAAO,CAAE,CACL,eAAgB,kBADX,CAF2B,CAKpCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeT,YAAf,CAL8B,CAAZ,CApCzB,SAoCGU,QApCH,gEA4CgBA,QAAQ,CAACC,IAAT,EA5ChB,SA4CGC,IA5CH,mBA6CAA,IAAI,CAACC,MA7CL,+BA8CID,IAAI,CAACC,MAAL,CAAY,CAAZ,EAAeC,MAAf,GAA0B,GA9C9B,gCA+CW,IAAIC,CAAAA,KAAJ,CAAU,iCAAV,CA/CX,cAiDO,IAAIA,CAAAA,KAAJ,CAAU,wBAAV,CAjDP,SAoDHhB,QAAQ,CAACH,kBAAkB,CAACgB,IAAD,CAAnB,CAAR,CApDG,iFAsDCb,QAAQ,CAACL,gBAAgB,aAAjB,CAAR,CAtDD,kEAAP,CA0DH,CA3DD,CA6DA,cAAeG,CAAAA,gBAAf","sourcesContent":["import {singleImageFails, singleImageStarts, singleImageSuccess} from './singleImage'\n\n\nconst singleImageFetch = id =>{\n    return async dispatch => {\n        try{\n        dispatch(singleImageStarts())\n\n        const graphqlQuery = {\n            query:`\n            query single($_id: ID!){\n                singleImage(_id: $_id){\n                    imageUrl\n                    imageId\n                    creator {\n                        username\n                        imageUrl\n                    }\n                    description\n                    category\n                    createdAt\n                    thumpUp {\n                        thumpUpCount\n                        userActionThumpUp {\n                            _id\n                        }\n                    }\n                    thumpDown {\n                        thumpDownCount\n                        userActionThumpDown{\n                            _id\n                        }\n                    }  \n                }\n            }`,\n            variables: {\n                _id: id\n            }\n        }\n\n        const response = await fetch('/graphql',{\n            method:'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const data = await response.json()\n        if(data.errors){\n            if(data.errors[0].status === 404){\n                throw new Error('The selected image is not found')\n            }\n            throw new Error('A server error occured')\n        }\n\n        dispatch(singleImageSuccess(data))\n        }catch(error){\n            dispatch(singleImageFails(error))\n        }\n    }\n\n}\n\nexport default singleImageFetch\n"]},"metadata":{},"sourceType":"module"}