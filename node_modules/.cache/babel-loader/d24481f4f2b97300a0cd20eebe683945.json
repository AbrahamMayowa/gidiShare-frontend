{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/node_modules/@babel/runtime/regenerator\";import{uploadFail,uploadStarts,uploadSuccess}from'./uploadAction';var uploadThunk=function uploadThunk(image,description,category,token){return function _callee(dispatch){var formData,imageFileSave,imageData,graphqlQuery,graphqlResponse,resData;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch(uploadStarts());formData=new FormData();formData.append('image',image);_context.next=6;return _regeneratorRuntime.awrap(fetch('/api/upload',{method:'PUT',headers:{Authorization:'Bearer '+token},body:formData}));case 6:imageFileSave=_context.sent;if(imageFileSave.ok){_context.next=11;break;}if(!(imageFileSave.status===401)){_context.next=10;break;}throw new Error('Please log in to upload image');case 10:throw new Error('A server error occured');case 11:_context.next=13;return _regeneratorRuntime.awrap(imageFileSave.json());case 13:imageData=_context.sent;// the graphql for storing the image in the db\ngraphqlQuery={query:\"\\n            mutation uploadMutation($imageUrl: String!, $description: String!, $category: String!){\\n                uploadImage(imageUrl: $imageUrl, description: $description, category: $category){\\n                    imageUrl\\n                    imageId\\n                    creator {\\n                        username\\n                        imageUrl\\n                    }\\n                    description\\n                    category\\n                    createdAt\\n                    thumpUp {\\n                        thumpUpCount\\n                        userActionThumpUp {\\n                            _id\\n                        }\\n                    }\\n                    thumpDown {\\n                        thumpDownCount\\n                        userActionThumpDown{\\n                            _id\\n                        }\\n                    }\\n                }\\n            }\",variables:{imageUrl:imageData.imageUrl,description:description,category:category}};_context.next=17;return _regeneratorRuntime.awrap(fetch('/graphql',{method:'POST',headers:{Authorization:'Bearer '+token,'Content-Type':'application/json'},body:JSON.stringify(graphqlQuery)}));case 17:graphqlResponse=_context.sent;_context.next=20;return _regeneratorRuntime.awrap(graphqlResponse.json());case 20:resData=_context.sent;if(!resData.errors){_context.next=25;break;}if(!(resData.errors[0].status===401)){_context.next=24;break;}throw new Error('You need to log in');case 24:throw new Error('Please provide valid input');case 25:dispatch(uploadSuccess(resData));_context.next=31;break;case 28:_context.prev=28;_context.t0=_context[\"catch\"](0);dispatch(uploadFail(_context.t0));case 31:case\"end\":return _context.stop();}}},null,null,[[0,28]]);};};export default uploadThunk;","map":{"version":3,"sources":["/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/src/redux/action/uploadThunk.js"],"names":["uploadFail","uploadStarts","uploadSuccess","uploadThunk","image","description","category","token","dispatch","formData","FormData","append","fetch","method","headers","Authorization","body","imageFileSave","ok","status","Error","json","imageData","graphqlQuery","query","variables","imageUrl","JSON","stringify","graphqlResponse","resData","errors"],"mappings":"uIAAA,OAAQA,UAAR,CAAoBC,YAApB,CAAkCC,aAAlC,KAAsD,gBAAtD,CAGA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAQC,WAAR,CAAqBC,QAArB,CAA+BC,KAA/B,CAA0C,CAC1D,MAAO,kBAAMC,QAAN,6MAEHA,QAAQ,CAACP,YAAY,EAAb,CAAR,CACMQ,QAHH,CAGc,GAAIC,CAAAA,QAAJ,EAHd,CAIHD,QAAQ,CAACE,MAAT,CAAgB,OAAhB,CAAyBP,KAAzB,EAJG,iDAKyBQ,KAAK,CAAC,aAAD,CAAgB,CAC7CC,MAAM,CAAE,KADqC,CAE7CC,OAAO,CAAE,CACLC,aAAa,CAAE,UAAYR,KADtB,CAFoC,CAK7CS,IAAI,CAAEP,QALuC,CAAhB,CAL9B,SAKGQ,aALH,kBAcCA,aAAa,CAACC,EAdf,+BAeID,aAAa,CAACE,MAAd,GAAyB,GAf7B,gCAgBW,IAAIC,CAAAA,KAAJ,CAAU,+BAAV,CAhBX,cAkBO,IAAIA,CAAAA,KAAJ,CAAU,wBAAV,CAlBP,2DAqBqBH,aAAa,CAACI,IAAd,EArBrB,UAqBGC,SArBH,eAuBH;AACMC,YAxBH,CAwBkB,CACjBC,KAAK,+4BADY,CA2BjBC,SAAS,CAAE,CACPC,QAAQ,CAAEJ,SAAS,CAACI,QADb,CAEPrB,WAAW,CAAEA,WAFN,CAGPC,QAAQ,CAAEA,QAHH,CA3BM,CAxBlB,mDAyD2BM,KAAK,CAAC,UAAD,CAAa,CAC5CC,MAAM,CAAE,MADoC,CAE5CC,OAAO,CAAE,CACLC,aAAa,CAAE,UAAYR,KADtB,CAEL,eAAgB,kBAFX,CAFmC,CAM5CS,IAAI,CAAEW,IAAI,CAACC,SAAL,CAAeL,YAAf,CANsC,CAAb,CAzDhC,UAyDGM,eAzDH,iEAkEmBA,eAAe,CAACR,IAAhB,EAlEnB,UAkEGS,OAlEH,mBAmEAA,OAAO,CAACC,MAnER,+BAoEID,OAAO,CAACC,MAAR,CAAe,CAAf,EAAkBZ,MAAlB,GAA6B,GApEjC,gCAqEW,IAAIC,CAAAA,KAAJ,CAAU,oBAAV,CArEX,cAuEO,IAAIA,CAAAA,KAAJ,CAAU,4BAAV,CAvEP,SA0EHZ,QAAQ,CAACN,aAAa,CAAC4B,OAAD,CAAd,CAAR,CA1EG,iFA4EHtB,QAAQ,CAACR,UAAU,aAAX,CAAR,CA5EG,kEAAP,CAiFH,CAlFD,CAoFA,cAAeG,CAAAA,WAAf","sourcesContent":["import {uploadFail, uploadStarts, uploadSuccess} from './uploadAction'\n\n\nconst uploadThunk = (image, description, category, token) =>  {\n    return async dispatch => {\n        try{\n        dispatch(uploadStarts())\n        const formData = new FormData()\n        formData.append('image', image)\n        const imageFileSave = await fetch('/api/upload', {\n            method: 'PUT',\n            headers: {\n                Authorization: 'Bearer ' + token\n            },\n            body: formData\n\n        })\n\n        if(!imageFileSave.ok){\n            if(imageFileSave.status === 401){\n                throw new Error('Please log in to upload image')\n            }\n            throw new Error('A server error occured')\n        }\n\n        const imageData = await imageFileSave.json()\n\n        // the graphql for storing the image in the db\n        const graphqlQuery = {\n            query: `\n            mutation uploadMutation($imageUrl: String!, $description: String!, $category: String!){\n                uploadImage(imageUrl: $imageUrl, description: $description, category: $category){\n                    imageUrl\n                    imageId\n                    creator {\n                        username\n                        imageUrl\n                    }\n                    description\n                    category\n                    createdAt\n                    thumpUp {\n                        thumpUpCount\n                        userActionThumpUp {\n                            _id\n                        }\n                    }\n                    thumpDown {\n                        thumpDownCount\n                        userActionThumpDown{\n                            _id\n                        }\n                    }\n                }\n            }`,\n            variables: {\n                imageUrl: imageData.imageUrl,\n                description: description,\n                category: category\n            }\n        }\n        const graphqlResponse = await fetch('/graphql', {\n            method: 'POST',\n            headers: {\n                Authorization: 'Bearer ' + token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const resData = await graphqlResponse.json()\n        if(resData.errors){\n            if(resData.errors[0].status === 401){\n                throw new Error('You need to log in')\n            }\n            throw new Error('Please provide valid input')\n        }\n\n        dispatch(uploadSuccess(resData))\n    }catch(error){\n        dispatch(uploadFail(error))\n    }\n\n\n    }\n}\n\nexport default uploadThunk"]},"metadata":{},"sourceType":"module"}