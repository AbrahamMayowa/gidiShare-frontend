{"ast":null,"code":"import { loginFail, loginStart, loginSuccess } from './login';\n\nconst loginActionThunk = (username, password) => {\n  return async dispatch => {\n    dispatch(loginStart());\n    const graphqlQuery = {\n      query: `\n            mutation loginMutation($username: String!, $password: String!){\n                login(username: $username, password: $password){\n                    token\n                    refreshToken\n                    userId\n                    expiresIn\n                    username\n                    imageUrl\n                }\n            }`,\n      variables: {\n        username,\n        password\n      }\n    };\n\n    try {\n      const response = await fetch('http://localhost:5000/graphql', {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(graphqlQuery)\n      });\n      const resData = await response.json();\n\n      if (resData.error) {\n        if (resData.errors[0].status === 422) {\n          throw new Error('Provide valid input');\n        }\n\n        throw new Error('A server error occured!');\n      }\n\n      dispatch(loginSuccess(resData));\n    } catch (error) {\n      dispatch(loginFail(error));\n    }\n  };\n};\n\nexport default loginActionThunk;","map":{"version":3,"sources":["/home/mayor/gidiShare/frontend/src/redux/action/loginThunk.js"],"names":["loginFail","loginStart","loginSuccess","loginActionThunk","username","password","dispatch","graphqlQuery","query","variables","response","fetch","headers","method","body","JSON","stringify","resData","json","error","errors","status","Error"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,UAAnB,EAA+BC,YAA/B,QAAkD,SAAlD;;AAGA,MAAMC,gBAAgB,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAuB;AAC5C,SAAO,MAAMC,QAAN,IAAkB;AACrBA,IAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;AAEA,UAAMM,YAAY,GAAG;AACjBC,MAAAA,KAAK,EAAG;;;;;;;;;;cADS;AAajBC,MAAAA,SAAS,EAAE;AACPL,QAAAA,QADO;AAEPC,QAAAA;AAFO;AAbM,KAArB;;AAmBA,QAAG;AACH,YAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAAD,EAAkC;AAC1DC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SADiD;AAI1DC,QAAAA,MAAM,EAAE,MAJkD;AAK1DC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,YAAf;AALoD,OAAlC,CAA5B;AASA,YAAMU,OAAO,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAtB;;AACA,UAAGD,OAAO,CAACE,KAAX,EAAiB;AACb,YAAGF,OAAO,CAACG,MAAR,CAAe,CAAf,EAAkBC,MAAlB,KAA6B,GAAhC,EAAoC;AAChC,gBAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACH;;AACD,cAAM,IAAIA,KAAJ,CAAU,yBAAV,CAAN;AACH;;AAEDhB,MAAAA,QAAQ,CAACJ,YAAY,CAACe,OAAD,CAAb,CAAR;AACH,KAnBG,CAmBH,OAAME,KAAN,EAAY;AACTb,MAAAA,QAAQ,CAACN,SAAS,CAACmB,KAAD,CAAV,CAAR;AACH;AACA,GA5CD;AA6CH,CA9CD;;AAgDA,eAAehB,gBAAf","sourcesContent":["import {loginFail, loginStart, loginSuccess} from './login'\n\n\nconst loginActionThunk = (username, password) =>{\n    return async dispatch => {\n        dispatch(loginStart())\n\n        const graphqlQuery = {\n            query: `\n            mutation loginMutation($username: String!, $password: String!){\n                login(username: $username, password: $password){\n                    token\n                    refreshToken\n                    userId\n                    expiresIn\n                    username\n                    imageUrl\n                }\n            }`,\n\n            variables: {\n                username,\n                password\n            }\n        }\n\n        try{\n        const response = await fetch('http://localhost:5000/graphql', {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify(graphqlQuery)\n\n        })\n\n        const resData = await response.json()\n        if(resData.error){\n            if(resData.errors[0].status === 422){\n                throw new Error('Provide valid input')\n            }\n            throw new Error('A server error occured!')\n        }\n\n        dispatch(loginSuccess(resData))\n    }catch(error){\n        dispatch(loginFail(error))\n    }\n    }\n}\n\nexport default loginActionThunk"]},"metadata":{},"sourceType":"module"}