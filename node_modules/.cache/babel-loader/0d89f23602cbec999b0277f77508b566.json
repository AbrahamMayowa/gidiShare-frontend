{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/node_modules/@babel/runtime/regenerator\";import{failFetchList,startFetchList,successFetchList}from'./imageListAction';var imageListThunk=function imageListThunk(){return function _callee(dispatch){var graphqlQuery,response,resData;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch(startFetchList());graphqlQuery={query:\"\\n            query images{\\n                imageList {\\n                    imageUrl\\n                    imageId\\n                    creator {\\n                        username\\n                        imageUrl\\n                    }\\n                    description\\n                    category\\n                    createdAt\\n                    thumpUp {\\n                        thumpUpCount\\n                        userActionThumpUp {\\n                            _id\\n                        }\\n                    }\\n                    \\n                    thumpDown {\\n                        thumpDownCount\\n                        userActionThumpDown {\\n                            _id\\n                        }\\n                    }\\n\\n                }\\n\\n            }\\n            \"};_context.next=5;return _regeneratorRuntime.awrap(fetch('/graphql',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(graphqlQuery)}));case 5:response=_context.sent;_context.next=8;return _regeneratorRuntime.awrap(response.json());case 8:resData=_context.sent;if(!resData.errors){_context.next=13;break;}if(!(resData.errors[0].status===404)){_context.next=12;break;}throw new Error('No image found');case 12:throw new Error('A server error occured');case 13:dispatch(successFetchList(resData));_context.next=19;break;case 16:_context.prev=16;_context.t0=_context[\"catch\"](0);dispatch(failFetchList(_context.t0));case 19:case\"end\":return _context.stop();}}},null,null,[[0,16]]);};};export default imageListThunk;","map":{"version":3,"sources":["/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/src/redux/action/imageListActionThunk.js"],"names":["failFetchList","startFetchList","successFetchList","imageListThunk","dispatch","graphqlQuery","query","fetch","method","headers","body","JSON","stringify","response","json","resData","errors","status","Error"],"mappings":"uIAAA,OAAQA,aAAR,CAAuBC,cAAvB,CAAuCC,gBAAvC,KAA8D,mBAA9D,CAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CACzB,MAAO,kBAAOC,QAAP,qKAEHA,QAAQ,CAACH,cAAc,EAAf,CAAR,CACMI,YAHH,CAGkB,CACjBC,KAAK,wyBADY,CAHlB,kDAmCoBC,KAAK,CAAC,UAAD,CAAa,CACrCC,MAAM,CAAE,MAD6B,CAErCC,OAAO,CAAE,CACL,eAAgB,kBADX,CAF4B,CAKrCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeP,YAAf,CAL+B,CAAb,CAnCzB,SAmCGQ,QAnCH,gEA2CmBA,QAAQ,CAACC,IAAT,EA3CnB,SA2CGC,OA3CH,mBA8CAA,OAAO,CAACC,MA9CR,+BA+CID,OAAO,CAACC,MAAR,CAAe,CAAf,EAAkBC,MAAlB,GAA6B,GA/CjC,gCAgDW,IAAIC,CAAAA,KAAJ,CAAU,gBAAV,CAhDX,cAkDO,IAAIA,CAAAA,KAAJ,CAAU,wBAAV,CAlDP,SAqDHd,QAAQ,CAACF,gBAAgB,CAACa,OAAD,CAAjB,CAAR,CArDG,iFAuDHX,QAAQ,CAACJ,aAAa,aAAd,CAAR,CAvDG,kEAAP,CA6DH,CA9DD,CAgEA,cAAeG,CAAAA,cAAf","sourcesContent":["import {failFetchList, startFetchList, successFetchList} from './imageListAction'\n\nconst imageListThunk = () => {\n    return async (dispatch) => {\n        try{\n        dispatch(startFetchList())\n        const graphqlQuery = {\n            query: `\n            query images{\n                imageList {\n                    imageUrl\n                    imageId\n                    creator {\n                        username\n                        imageUrl\n                    }\n                    description\n                    category\n                    createdAt\n                    thumpUp {\n                        thumpUpCount\n                        userActionThumpUp {\n                            _id\n                        }\n                    }\n                    \n                    thumpDown {\n                        thumpDownCount\n                        userActionThumpDown {\n                            _id\n                        }\n                    }\n\n                }\n\n            }\n            `\n        }\n        const response = await fetch('/graphql', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const resData = await response.json()\n      \n\n        if(resData.errors){\n            if(resData.errors[0].status === 404){\n                throw new Error('No image found')\n            }\n            throw new Error('A server error occured')\n        }\n\n        dispatch(successFetchList(resData))\n    }catch(error){\n        dispatch(failFetchList(error))\n    }\n\n\n\n    } \n}\n\nexport default imageListThunk"]},"metadata":{},"sourceType":"module"}