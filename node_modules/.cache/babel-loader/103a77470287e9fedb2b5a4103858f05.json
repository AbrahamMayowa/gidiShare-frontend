{"ast":null,"code":"import { singleImageFails, singleImageStarts, singleImageSuccess } from './singleImage';\n\nconst singleImageFetch = id => {\n  return async dispatch => {\n    try {\n      dispatch(singleImageStarts());\n      const graphqlQuery = {\n        query: `\n            query single($_id: ID!){\n                singleImage(_id: $_id){\n                    imageUrl\n                    creator {\n                        username\n                        imageUrl\n                    }\n                    description\n                    category\n                    createdAt\n                    thumpUp {\n                        thumpUpCount\n                        userActionThumpUp {\n                            _id\n                        }\n                    }\n                    thumpDown {\n                        thumpDownCount\n                        userActionThumpDown{\n                            _id\n                        }\n                    }  \n                }\n            }`,\n        variables: {\n          _id: id\n        }\n      };\n      const response = fetch('http://localhost:5000/graphql', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphqlQuery)\n      });\n      const data = await response.json();\n\n      if (data.errors) {\n        if (data.errors[0].status === 404) {\n          throw new Error('The selected image is not found');\n        }\n\n        throw new Error('A server error occured');\n      }\n\n      dispatch(singleImageSuccess(data));\n    } catch (error) {\n      dispatch(singleImageFails(error));\n    }\n  };\n};","map":{"version":3,"sources":["/home/mayor/gidiShare2/frontend/src/redux/action/singleImageThunk.js"],"names":["singleImageFails","singleImageStarts","singleImageSuccess","singleImageFetch","id","dispatch","graphqlQuery","query","variables","_id","response","fetch","method","headers","body","JSON","stringify","data","json","errors","status","Error","error"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,iBAA1B,EAA6CC,kBAA7C,QAAsE,eAAtE;;AAGA,MAAMC,gBAAgB,GAAGC,EAAE,IAAG;AAC1B,SAAO,MAAMC,QAAN,IAAkB;AACrB,QAAG;AACHA,MAAAA,QAAQ,CAACJ,iBAAiB,EAAlB,CAAR;AAEA,YAAMK,YAAY,GAAG;AACjBC,QAAAA,KAAK,EAAE;;;;;;;;;;;;;;;;;;;;;;;;cADU;AA0BjBC,QAAAA,SAAS,EAAE;AACPC,UAAAA,GAAG,EAAEL;AADE;AA1BM,OAArB;AA+BA,YAAMM,QAAQ,GAAGC,KAAK,CAAC,+BAAD,EAAiC;AACnDC,QAAAA,MAAM,EAAC,MAD4C;AAEnDC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAF0C;AAKnDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,YAAf;AAL6C,OAAjC,CAAtB;AAQA,YAAMW,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;;AAEA,UAAGD,IAAI,CAACE,MAAR,EAAe;AACX,YAAGF,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,MAAf,KAA0B,GAA7B,EAAiC;AAC7B,gBAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACH;;AACD,cAAM,IAAIA,KAAJ,CAAU,wBAAV,CAAN;AACH;;AAEDhB,MAAAA,QAAQ,CAACH,kBAAkB,CAACe,IAAD,CAAnB,CAAR;AACC,KApDD,CAoDC,OAAMK,KAAN,EAAY;AACTjB,MAAAA,QAAQ,CAACL,gBAAgB,CAACsB,KAAD,CAAjB,CAAR;AACH;AACJ,GAxDD;AA0DH,CA3DD","sourcesContent":["import {singleImageFails, singleImageStarts, singleImageSuccess} from './singleImage'\n\n\nconst singleImageFetch = id =>{\n    return async dispatch => {\n        try{\n        dispatch(singleImageStarts())\n\n        const graphqlQuery = {\n            query:`\n            query single($_id: ID!){\n                singleImage(_id: $_id){\n                    imageUrl\n                    creator {\n                        username\n                        imageUrl\n                    }\n                    description\n                    category\n                    createdAt\n                    thumpUp {\n                        thumpUpCount\n                        userActionThumpUp {\n                            _id\n                        }\n                    }\n                    thumpDown {\n                        thumpDownCount\n                        userActionThumpDown{\n                            _id\n                        }\n                    }  \n                }\n            }`,\n            variables: {\n                _id: id\n            }\n        }\n\n        const response = fetch('http://localhost:5000/graphql',{\n            method:'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const data = await response.json()\n\n        if(data.errors){\n            if(data.errors[0].status === 404){\n                throw new Error('The selected image is not found')\n            }\n            throw new Error('A server error occured')\n        }\n\n        dispatch(singleImageSuccess(data))\n        }catch(error){\n            dispatch(singleImageFails(error))\n        }\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}