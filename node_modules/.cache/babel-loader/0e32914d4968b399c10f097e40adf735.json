{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/node_modules/@babel/runtime/regenerator\";import{loginFail,loginStart,loginSuccess}from'./login';var loginActionThunk=function loginActionThunk(username,password){return function _callee(dispatch){var graphqlQuery,response,resData;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(loginStart());graphqlQuery={query:\"\\n            mutation loginMutation($username: String!, $password: String!){\\n                login(username: $username, password: $password){\\n                    token\\n                    refreshToken\\n                    userId\\n                    expiresIn\\n                    username\\n                    imageUrl\\n                }\\n            }\",variables:{username:username,password:password}};_context.prev=2;_context.next=5;return _regeneratorRuntime.awrap(fetch('/graphql',{headers:{'Content-Type':'application/json'},method:'POST',body:JSON.stringify(graphqlQuery)}));case 5:response=_context.sent;_context.next=8;return _regeneratorRuntime.awrap(response.json());case 8:resData=_context.sent;if(!resData.error){_context.next=13;break;}if(!(resData.errors[0].status===422)){_context.next=12;break;}throw new Error('Provide valid input');case 12:throw new Error('A server error occured!');case 13:dispatch(loginSuccess(resData));_context.next=19;break;case 16:_context.prev=16;_context.t0=_context[\"catch\"](2);dispatch(loginFail(_context.t0));case 19:case\"end\":return _context.stop();}}},null,null,[[2,16]]);};};export default loginActionThunk;","map":{"version":3,"sources":["/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/src/redux/action/loginThunk.js"],"names":["loginFail","loginStart","loginSuccess","loginActionThunk","username","password","dispatch","graphqlQuery","query","variables","fetch","headers","method","body","JSON","stringify","response","json","resData","error","errors","status","Error"],"mappings":"uIAAA,OAAQA,SAAR,CAAmBC,UAAnB,CAA+BC,YAA/B,KAAkD,SAAlD,CAGA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,QAAD,CAAWC,QAAX,CAAuB,CAC5C,MAAO,kBAAMC,QAAN,qJACHA,QAAQ,CAACL,UAAU,EAAX,CAAR,CAEMM,YAHH,CAGkB,CACjBC,KAAK,wWADY,CAajBC,SAAS,CAAE,CACPL,QAAQ,CAARA,QADO,CAEPC,QAAQ,CAARA,QAFO,CAbM,CAHlB,kEAuBoBK,KAAK,CAAC,UAAD,CAAa,CACrCC,OAAO,CAAE,CACL,eAAgB,kBADX,CAD4B,CAIrCC,MAAM,CAAE,MAJ6B,CAKrCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeR,YAAf,CAL+B,CAAb,CAvBzB,SAuBGS,QAvBH,gEAgCmBA,QAAQ,CAACC,IAAT,EAhCnB,SAgCGC,OAhCH,mBAiCAA,OAAO,CAACC,KAjCR,+BAkCID,OAAO,CAACE,MAAR,CAAe,CAAf,EAAkBC,MAAlB,GAA6B,GAlCjC,gCAmCW,IAAIC,CAAAA,KAAJ,CAAU,qBAAV,CAnCX,cAqCO,IAAIA,CAAAA,KAAJ,CAAU,yBAAV,CArCP,SAwCHhB,QAAQ,CAACJ,YAAY,CAACgB,OAAD,CAAb,CAAR,CAxCG,iFA0CHZ,QAAQ,CAACN,SAAS,aAAV,CAAR,CA1CG,kEAAP,CA6CH,CA9CD,CAgDA,cAAeG,CAAAA,gBAAf","sourcesContent":["import {loginFail, loginStart, loginSuccess} from './login'\n\n\nconst loginActionThunk = (username, password) =>{\n    return async dispatch => {\n        dispatch(loginStart())\n\n        const graphqlQuery = {\n            query: `\n            mutation loginMutation($username: String!, $password: String!){\n                login(username: $username, password: $password){\n                    token\n                    refreshToken\n                    userId\n                    expiresIn\n                    username\n                    imageUrl\n                }\n            }`,\n\n            variables: {\n                username,\n                password\n            }\n        }\n\n        try{\n        const response = await fetch('/graphql', {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify(graphqlQuery)\n\n        })\n\n        const resData = await response.json()\n        if(resData.error){\n            if(resData.errors[0].status === 422){\n                throw new Error('Provide valid input')\n            }\n            throw new Error('A server error occured!')\n        }\n\n        dispatch(loginSuccess(resData))\n    }catch(error){\n        dispatch(loginFail(error))\n    }\n    }\n}\n\nexport default loginActionThunk"]},"metadata":{},"sourceType":"module"}