{"ast":null,"code":"import _slicedToArray from \"/home/mayor/gidiShare2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mayor/gidiShare2/frontend/src/screen/ScreenWrapper.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { persistor } from '../redux/store';\nimport SignupForm from '../components/signupModal';\nimport ImageDetails from '../screen/ImageDetails';\nimport UploadScreen from '../screen/UploadScreen';\nimport LoginForm from '../components/Login';\nimport UploadForm from '../components/UploadForm';\nimport '../styles/App.css';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport ImageList from './ImageList';\nimport logoutDispatch from '../redux/action/logoutThunk';\nimport refreshTokenThunk from '../redux/action/refreshTokenThunk';\n\nfunction ScreenWrapper() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        openLoginModal = _useState2[0],\n        setOpenLogininModal = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        openSignupModal = _useState4[0],\n        setOpenSignupModal = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        openUploadFormModal = _useState6[0],\n        setOpenUploadFormModal = _useState6[1];\n\n  const _useSelector = useSelector(store => store.auth),\n        isAuth = _useSelector.isAuth,\n        token = _useSelector.token,\n        userId = _useSelector.userId;\n\n  const dispatch = useDispatch(); // this useEffect prevent logininModal from being true when user click logout\n\n  useEffect(() => {\n    setOpenLogininModal(false);\n  }, [isAuth]); /// refreshToken timeout\n\n  const refreshTokenTimeout = () => {\n    //set timeout for refreshToken after successfully logIn\n    let timerId;\n\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n\n    if (token) {\n      console.log('timeout');\n      timerId = setTimeout(refreshTokenThunk, 8000, token, userId);\n    }\n  };\n\n  const handleLoginModal = () => {\n    if (openLoginModal) {\n      setOpenLogininModal(false);\n    } else {\n      setOpenLogininModal(true);\n    }\n  };\n\n  const handleSignupModal = () => {\n    if (openSignupModal) {\n      setOpenSignupModal(false);\n    } else {\n      setOpenSignupModal(true);\n    }\n  };\n\n  const handleUploadModal = () => {\n    if (openUploadFormModal) {\n      setOpenUploadFormModal(false);\n    } else {\n      setOpenUploadFormModal(true);\n    }\n  };\n\n  const signout = () => {\n    persistor.purge();\n    dispatch(logoutDispatch(token));\n  };\n\n  let loginAndSignup = React.createElement(\"div\", {\n    className: \"logout-and-signin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: \"login nav-box\",\n    onClick: handleLoginModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Login\"), React.createElement(\"li\", {\n    className: \"sign-up nav-box\",\n    onClick: handleSignupModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Signup\")));\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"nav\", {\n    className: \"nav-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    className: \"website-name\",\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"gidiShare\"), isAuth ? React.createElement(\"div\", {\n    className: \"logout nav-box\",\n    onClick: signout,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Logout\") : loginAndSignup), React.createElement(\"div\", {\n    className: \"main-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: openSignupModal ? 'signup-modal-open' : 'signup-modal-close',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(SignupForm, {\n    handleSignup: handleSignupModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  })), React.createElement(\"section\", {\n    className: openLoginModal ? 'login-modal-open' : 'login-modal-close',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(LoginForm, {\n    handleLogin: handleLoginModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })), React.createElement(\"section\", {\n    className: openUploadFormModal ? 'upload-open' : 'upload-close',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(UploadForm, {\n    handleUpload: handleUploadModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: \"/details/:id\",\n    exact: true,\n    render: props => React.createElement(ImageDetails, Object.assign({\n      handleLogin: handleLoginModal,\n      handleUploadForm: handleUploadModal\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), \"/>\", React.createElement(Route, {\n    path: \"/upload\",\n    exact: true,\n    component: UploadScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/\",\n    exact: true,\n    render: props => React.createElement(ImageList, Object.assign({\n      handleLogin: handleLoginModal,\n      handleUploadForm: handleUploadModal\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), \"/>\")));\n}\n\nexport default ScreenWrapper;","map":{"version":3,"sources":["/home/mayor/gidiShare2/frontend/src/screen/ScreenWrapper.js"],"names":["React","useState","useEffect","useSelector","useDispatch","NavLink","persistor","SignupForm","ImageDetails","UploadScreen","LoginForm","UploadForm","BrowserRouter","Router","Switch","Route","ImageList","logoutDispatch","refreshTokenThunk","ScreenWrapper","openLoginModal","setOpenLogininModal","openSignupModal","setOpenSignupModal","openUploadFormModal","setOpenUploadFormModal","store","auth","isAuth","token","userId","dispatch","refreshTokenTimeout","timerId","clearTimeout","console","log","setTimeout","handleLoginModal","handleSignupModal","handleUploadModal","signout","purge","loginAndSignup","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {useSelector, useDispatch} from 'react-redux'\nimport {NavLink} from 'react-router-dom'\nimport {persistor} from '../redux/store'\nimport SignupForm from '../components/signupModal'\nimport ImageDetails from '../screen/ImageDetails'\nimport UploadScreen from '../screen/UploadScreen'\nimport LoginForm from '../components/Login'\nimport UploadForm from '../components/UploadForm'\n\n\nimport '../styles/App.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport ImageList from './ImageList'\nimport logoutDispatch from '../redux/action/logoutThunk'\nimport refreshTokenThunk from '../redux/action/refreshTokenThunk'\n\n\n\nfunction ScreenWrapper() {\n\n  const [openLoginModal, setOpenLogininModal] = useState(false)\n  const [openSignupModal, setOpenSignupModal] = useState(false)\n  const [openUploadFormModal, setOpenUploadFormModal] = useState(false)\n\n  const {isAuth, token, userId} = useSelector(store => store.auth)\n  const dispatch = useDispatch()\n\n  // this useEffect prevent logininModal from being true when user click logout\n  useEffect(()=>{\n      setOpenLogininModal(false)\n  }, [isAuth])\n\n  /// refreshToken timeout\n  const refreshTokenTimeout = ()=>{\n      //set timeout for refreshToken after successfully logIn\n      let timerId\n      if(timerId){\n          clearTimeout(timerId)\n      }\n      if(token){\n          console.log('timeout')\n      timerId = setTimeout(refreshTokenThunk, 8000, token, userId)\n      }\n\n  }\n\n  const handleLoginModal = () =>{\n    if(openLoginModal){\n      setOpenLogininModal(false)\n    }else{setOpenLogininModal(true)}\n  }\n\n  const handleSignupModal = () =>{\n    if(openSignupModal){\n      setOpenSignupModal(false)\n\n    }else{setOpenSignupModal(true)}\n  }\n\n  const handleUploadModal = () =>{\n    if(openUploadFormModal){\n      setOpenUploadFormModal(false)\n    }else{\n    setOpenUploadFormModal(true)\n    }\n  }\n\n  const signout = ()=>{\n    persistor.purge()\n    dispatch(logoutDispatch(token))\n    \n  }\n\n  let loginAndSignup = (<div className='logout-and-signin'>\n    <ul>\n    <li className=\"login nav-box\" onClick={handleLoginModal}>Login</li>\n    <li className=\"sign-up nav-box\" onClick={handleSignupModal}>Signup</li>\n    </ul>\n  </div>)\n\n  return (\n        <div>\n        <nav className='nav-wrapper'>\n            <NavLink className='website-name' to='/'>gidiShare</NavLink>\n            {isAuth ? <div className=\"logout nav-box\" onClick={signout}>Logout</div> : loginAndSignup}\n        </nav>\n\n        <div className='main-body'>\n        <section className={(openSignupModal ? 'signup-modal-open' : 'signup-modal-close')}>\n          <SignupForm handleSignup={handleSignupModal} />\n        </section>\n\n        <section className={(openLoginModal ? 'login-modal-open' : 'login-modal-close')}>\n          <LoginForm handleLogin={handleLoginModal} />\n        </section>\n\n        <section className={(openUploadFormModal ? 'upload-open' : 'upload-close')}>\n          <UploadForm handleUpload={handleUploadModal} />\n        </section>\n\n        <Switch>\n        \n          <Route path=\"/details/:id\" exact render={props => <ImageDetails handleLogin={handleLoginModal} handleUploadForm={handleUploadModal} {...props} />} />/>\n          <Route path=\"/upload\" exact component={UploadScreen} />\n          <Route path='/' exact render={props => <ImageList handleLogin={handleLoginModal} handleUploadForm={handleUploadModal} {...props} />} />/>\n        </Switch>\n        </div>\n    </div>\n  )\n}\n\nexport default ScreenWrapper;\n"]},"metadata":{},"sourceType":"module"}