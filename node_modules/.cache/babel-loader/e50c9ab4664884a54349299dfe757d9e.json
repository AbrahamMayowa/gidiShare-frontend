{"ast":null,"code":"import _objectSpread from \"/home/mayor/gidiShare2/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/mayor/gidiShare2/frontend/src/screen/ImageDetails.js\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport ImageCard from '../components/ImageCard';\nimport singleImageThunk from '../redux/action/singleImageThunk';\nimport singleImageFetch from '../redux/action/singleImageThunk';\nimport Loading from '../components/Loading';\nimport Error from '../components/Error';\n\nclass DetailsScreen extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const matchId = this.props.match.params.id;\n    this.props.dispatch(singleImageFetch(matchId));\n  }\n\n  render() {\n    const singleImage = this.props.singleImage;\n\n    const _singleImage = _objectSpread({}, singleImage),\n          loading = _singleImage.loading,\n          error = _singleImage.error;\n\n    if (loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"working\");\n    }\n  }\n\n}\n\nconst mapPropToState = state => {\n  return {\n    singleImage: state.singleImage\n  };\n};\n\nexport default withRouter(connect(mapPropToState)(DetailsScreen));","map":{"version":3,"sources":["/home/mayor/gidiShare2/frontend/src/screen/ImageDetails.js"],"names":["React","useEffect","connect","withRouter","ImageCard","singleImageThunk","singleImageFetch","Loading","Error","DetailsScreen","Component","constructor","props","componentDidMount","matchId","match","params","id","dispatch","render","singleImage","loading","error","mapPropToState","state"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;AAEA,MAAMC,aAAN,SAA4BT,KAAK,CAACU,SAAlC,CAA2C;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACH;;AAEDC,EAAAA,iBAAiB,GAAE;AACf,UAAMC,OAAO,GAAG,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBC,EAAxC;AACA,SAAKL,KAAL,CAAWM,QAAX,CAAoBZ,gBAAgB,CAACQ,OAAD,CAApC;AACH;;AAEDK,EAAAA,MAAM,GAAE;AACJ,UAAMC,WAAW,GAAG,KAAKR,KAAL,CAAWQ,WAA/B;;AADI,2CAEyBA,WAFzB;AAAA,UAEGC,OAFH,gBAEGA,OAFH;AAAA,UAEYC,KAFZ,gBAEYA,KAFZ;;AAIR,QAAGD,OAAH,EAAW;AACP,aAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFD,MAEK;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ;AAKC;AAEJ;;AAxB0C;;AA2B3C,MAAME,cAAc,GAAGC,KAAK,IAAG;AAC3B,SAAO;AACHJ,IAAAA,WAAW,EAAEI,KAAK,CAACJ;AADhB,GAAP;AAGH,CAJD;;AAMA,eAAejB,UAAU,CAACD,OAAO,CAACqB,cAAD,CAAP,CAAwBd,aAAxB,CAAD,CAAzB","sourcesContent":["import React, {useEffect} from 'react'\nimport {connect} from 'react-redux'\nimport {withRouter} from 'react-router-dom'\nimport ImageCard from '../components/ImageCard'\nimport singleImageThunk from '../redux/action/singleImageThunk'\nimport singleImageFetch from '../redux/action/singleImageThunk'\nimport Loading from '../components/Loading'\nimport Error from '../components/Error'\n\nclass DetailsScreen extends React.Component{\n    constructor(props){\n        super(props)\n    }\n\n    componentDidMount(){\n        const matchId = this.props.match.params.id\n        this.props.dispatch(singleImageFetch(matchId))\n    }\n\n    render(){\n        const singleImage = this.props.singleImage\n        const {loading, error} = {...singleImage}\n    \n    if(loading){\n        return <Loading />\n    }else{\n    return (\n        <div>\n            working\n        </div>\n    )\n    }\n\n}\n}\n\nconst mapPropToState = state =>{\n    return {\n        singleImage: state.singleImage\n    }\n}\n\nexport default withRouter(connect(mapPropToState)(DetailsScreen))"]},"metadata":{},"sourceType":"module"}