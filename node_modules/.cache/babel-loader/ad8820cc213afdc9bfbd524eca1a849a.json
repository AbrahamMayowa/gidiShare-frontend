{"ast":null,"code":"import _objectSpread from \"/home/mayor/gidiShare2/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { START_FETCH_LIST, FAIL_FETCH_LIST, SUCCESS_FETCH_LIST } from '../action/imageListAction';\nimport { THUMP_DOWN, THUMP_UP, THUMP_BEGIN } from '../action/thumpAction';\nconst initialState = {\n  loading: false,\n  images: [],\n  error: ''\n};\n\nconst imagesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case THUMP_BEGIN:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case THUMP_SUCCESS:\n      const updateImages = [...state.images];\n      const imageIndex = updateImages.findIndex(p => p.imageId.toString() === action.payload.data.thumpUpMutation.imageId.toString());\n\n      if (imageIndex > -1) {\n        updateImages[imageIndex].thumpUp = action.payload.data.thumpUpMutation.thumpUp;\n        updateImages[imageIndex].thumpDown = action.payload.data.thumpUpMutation.thumpDown;\n      }\n\n      return _objectSpread({}, state, {\n        images: updateImages,\n        loading: false\n      });\n\n    case THUMP_FAIL:\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.message\n      });\n\n    case START_FETCH_LIST:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case SUCCESS_FETCH_LIST:\n      return _objectSpread({}, state, {\n        loading: false,\n        images: action.payload.images.data.imageList\n      });\n\n    case FAIL_FETCH_LIST:\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default imagesReducer;","map":{"version":3,"sources":["/home/mayor/gidiShare2/frontend/src/redux/reducer/images.js"],"names":["START_FETCH_LIST","FAIL_FETCH_LIST","SUCCESS_FETCH_LIST","THUMP_DOWN","THUMP_UP","THUMP_BEGIN","initialState","loading","images","error","imagesReducer","state","action","type","THUMP_SUCCESS","updateImages","imageIndex","findIndex","p","imageId","toString","payload","data","thumpUpMutation","thumpUp","thumpDown","THUMP_FAIL","message","imageList"],"mappings":";AAAA,SAAQA,gBAAR,EAA0BC,eAA1B,EAA2CC,kBAA3C,QAAoE,2BAApE;AACA,SAAQC,UAAR,EAAoBC,QAApB,EAA8BC,WAA9B,QAAgD,uBAAhD;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;;AAMA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAACL,YAAP,EAAqBM,MAArB,KAAgC;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKR,WAAL;AACI,+BACOM,KADP;AAEIJ,QAAAA,OAAO,EAAE;AAFb;;AAKJ,SAAKO,aAAL;AACI,YAAMC,YAAY,GAAG,CAAC,GAAGJ,KAAK,CAACH,MAAV,CAArB;AACA,YAAMQ,UAAU,GAAGD,YAAY,CAACE,SAAb,CAAuBC,CAAC,IAAIA,CAAC,CAACC,OAAF,CAAUC,QAAV,OAAyBR,MAAM,CAACS,OAAP,CAAeC,IAAf,CAAoBC,eAApB,CAAoCJ,OAApC,CAA4CC,QAA5C,EAArD,CAAnB;;AACA,UAAGJ,UAAU,GAAG,CAAC,CAAjB,EAAmB;AACfD,QAAAA,YAAY,CAACC,UAAD,CAAZ,CAAyBQ,OAAzB,GAAmCZ,MAAM,CAACS,OAAP,CAAeC,IAAf,CAAoBC,eAApB,CAAoCC,OAAvE;AACAT,QAAAA,YAAY,CAACC,UAAD,CAAZ,CAAyBS,SAAzB,GAAqCb,MAAM,CAACS,OAAP,CAAeC,IAAf,CAAoBC,eAApB,CAAoCE,SAAzE;AACH;;AACD,+BACOd,KADP;AAEIH,QAAAA,MAAM,EAAEO,YAFZ;AAGIR,QAAAA,OAAO,EAAE;AAHb;;AAOJ,SAAKmB,UAAL;AACI,+BACOf,KADP;AAEIJ,QAAAA,OAAO,EAAE,KAFb;AAGIE,QAAAA,KAAK,EAAEG,MAAM,CAACS,OAAP,CAAeM;AAH1B;;AAOJ,SAAK3B,gBAAL;AACI,+BACOW,KADP;AAEIJ,QAAAA,OAAO,EAAE;AAFb;;AAIJ,SAAKL,kBAAL;AACI,+BACOS,KADP;AAEIJ,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,MAAM,EAAEI,MAAM,CAACS,OAAP,CAAeb,MAAf,CAAsBc,IAAtB,CAA2BM;AAHvC;;AAKJ,SAAK3B,eAAL;AACI,+BACOU,KADP;AAEIJ,QAAAA,OAAO,EAAE,KAFb;AAGIE,QAAAA,KAAK,EAAEG,MAAM,CAACS,OAAP,CAAeZ;AAH1B;;AAKJ;AACI,aAAOE,KAAP;AA/CR;AAkDH,CAnDD;;AAqDA,eAAeD,aAAf","sourcesContent":["import {START_FETCH_LIST, FAIL_FETCH_LIST, SUCCESS_FETCH_LIST} from '../action/imageListAction'\nimport {THUMP_DOWN, THUMP_UP, THUMP_BEGIN} from '../action/thumpAction'\n\nconst initialState = {\n    loading: false,\n    images: [],\n    error: ''\n}\n\nconst imagesReducer = (state=initialState, action) => {\n    switch(action.type){\n        case THUMP_BEGIN:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case THUMP_SUCCESS:\n            const updateImages = [...state.images]\n            const imageIndex = updateImages.findIndex(p => p.imageId.toString() === action.payload.data.thumpUpMutation.imageId.toString())\n            if(imageIndex > -1){\n                updateImages[imageIndex].thumpUp = action.payload.data.thumpUpMutation.thumpUp\n                updateImages[imageIndex].thumpDown = action.payload.data.thumpUpMutation.thumpDown\n            }\n            return{\n                ...state,\n                images: updateImages,\n                loading: false\n\n            }\n\n        case THUMP_FAIL:\n            return{\n                ...state,\n                loading: false,\n                error: action.payload.message\n            }\n\n\n        case START_FETCH_LIST:\n            return {\n                ...state,\n                loading: true\n            }\n        case SUCCESS_FETCH_LIST:\n            return{\n                ...state,\n                loading: false,\n                images: action.payload.images.data.imageList\n            }\n        case FAIL_FETCH_LIST:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error\n            }\n        default:\n            return state\n\n    }\n}\n\nexport default imagesReducer"]},"metadata":{},"sourceType":"module"}