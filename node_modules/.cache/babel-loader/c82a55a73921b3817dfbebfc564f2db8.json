{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/node_modules/@babel/runtime/regenerator\";import{beginRefreshAuth,successRefreshAuth,failedRefreshAuth}from'../action/refreshAuth';var fetchRefreshToken=function fetchRefreshToken(token,id){return function _callee(dispatch){var graphqlQuery,resFetch,data;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch(beginRefreshAuth());graphqlQuery={query:\"\\n            mutation refresh($refreshToken: String!, $userId: ID!){\\n                refreshToken(refreshToken: $refreshToken, userId: $userId){\\n                    expiresIn\\n                    token\\n                    username\\n                    imageUrl\\n                }\\n            }\\n            \",variables:{refreshToken:token,userId:id}};_context.next=5;return _regeneratorRuntime.awrap(fetch('/graphql',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(graphqlQuery)}));case 5:resFetch=_context.sent;_context.next=8;return _regeneratorRuntime.awrap(resFetch.json());case 8:data=_context.sent;if(!data.errors){_context.next=13;break;}if(!(data.errors[0].status===401)){_context.next=12;break;}throw new Error('Please log in to your account');case 12:throw new Error('The login user is not exist');case 13:dispatch(successRefreshAuth(data));_context.next=19;break;case 16:_context.prev=16;_context.t0=_context[\"catch\"](0);dispatch(failedRefreshAuth(_context.t0));case 19:case\"end\":return _context.stop();}}},null,null,[[0,16]]);};};export default fetchRefreshToken;","map":{"version":3,"sources":["/Users/mayowa/Desktop/gidiShare-update/api/gidiShare-frontend/src/redux/action/refreshTokenThunk.js"],"names":["beginRefreshAuth","successRefreshAuth","failedRefreshAuth","fetchRefreshToken","token","id","dispatch","graphqlQuery","query","variables","refreshToken","userId","fetch","method","headers","body","JSON","stringify","resFetch","json","data","errors","status","Error"],"mappings":"uIAAA,OAAQA,gBAAR,CAA0BC,kBAA1B,CAA8CC,iBAA9C,KAAsE,uBAAtE,CAGA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,KAAD,CAAQC,EAAR,CAAc,CACpC,MAAO,kBAAOC,QAAP,kKAGHA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR,CAEMO,YALH,CAKkB,CACjBC,KAAK,2TADY,CAWjBC,SAAS,CAAE,CACPC,YAAY,CAAEN,KADP,CAEPO,MAAM,CAAEN,EAFD,CAXM,CALlB,kDAqBoBO,KAAK,CAAC,UAAD,CAAa,CACrCC,MAAM,CAAE,MAD6B,CAErCC,OAAO,CAAE,CACL,eAAgB,kBADX,CAF4B,CAKrCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeV,YAAf,CAL+B,CAAb,CArBzB,SAqBGW,QArBH,gEA6BgBA,QAAQ,CAACC,IAAT,EA7BhB,SA6BGC,IA7BH,mBA+BAA,IAAI,CAACC,MA/BL,+BAgCID,IAAI,CAACC,MAAL,CAAY,CAAZ,EAAeC,MAAf,GAA0B,GAhC9B,gCAiCW,IAAIC,CAAAA,KAAJ,CAAU,+BAAV,CAjCX,cAmCO,IAAIA,CAAAA,KAAJ,CAAU,6BAAV,CAnCP,SAsCHjB,QAAQ,CAACL,kBAAkB,CAACmB,IAAD,CAAnB,CAAR,CAtCG,iFAwCHd,QAAQ,CAACJ,iBAAiB,aAAlB,CAAR,CAxCG,kEAAP,CA2CH,CA5CD,CA8CA,cAAeC,CAAAA,iBAAf","sourcesContent":["import {beginRefreshAuth, successRefreshAuth, failedRefreshAuth} from '../action/refreshAuth'\n\n\nconst fetchRefreshToken = (token, id) =>{\n    return async (dispatch) => {\n\n        try{\n        dispatch(beginRefreshAuth())\n\n        const graphqlQuery = {\n            query: `\n            mutation refresh($refreshToken: String!, $userId: ID!){\n                refreshToken(refreshToken: $refreshToken, userId: $userId){\n                    expiresIn\n                    token\n                    username\n                    imageUrl\n                }\n            }\n            `,\n            variables: {\n                refreshToken: token,\n                userId: id\n            }\n        }\n        const resFetch = await fetch('/graphql', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const data = await resFetch.json()\n\n        if(data.errors){\n            if(data.errors[0].status === 401){\n                throw new Error('Please log in to your account')\n            }\n            throw new Error('The login user is not exist')\n        }\n        \n        dispatch(successRefreshAuth(data))  \n    }catch(error){\n        dispatch(failedRefreshAuth(error))\n    }\n}\n}\n\nexport default fetchRefreshToken"]},"metadata":{},"sourceType":"module"}