{"ast":null,"code":"import _slicedToArray from \"/home/mayor/gidiShare2/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mayor/gidiShare2/frontend/src/components/signupModal.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport '../styles/signup.css';\n\nconst SignupForm = ({\n  openSignup\n}) => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        imageName = _useState2[0],\n        setImageName = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        open = _useState4[0],\n        setOpen = _useState4[1];\n\n  useEffect(() => {\n    if (openSignup) {\n      setOpen(true);\n    }\n  }, []);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const validate = values => {\n    const errors = {};\n\n    if (!values.image) {\n      errors.image = 'Image is required';\n    } else if (values.image) {\n      // set the name of the image here because of the customed file input\n      const splitImagePath = values.image.split('\\\\'); // values.image is split because validator often add fake path to the image\n\n      setImageName(splitImagePath[splitImagePath.length - 1]);\n      const imageExt = values.image.split('.');\n      const ext = imageExt[imageExt.length - 1];\n      const supportedFormat = ['png', 'jpg', 'jpeg'];\n\n      if (!supportedFormat.includes(ext)) {\n        errors.image = \"The uploaded image is not in a supported image format\";\n      }\n    }\n\n    return errors;\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      password: '',\n      username: '',\n      image: null\n    },\n    validate,\n    validationSchema: Yup.object({\n      password: Yup.string().min(5, 'Password must be at least 5 characters').required('Password field is required'),\n      username: Yup.string().min(5, 'Username must be 5 characters at least').required('Username is required')\n    }),\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    }\n  });\n  return React.createElement(\"div\", {\n    className: \"form-wrapper \" + (!open ? 'modal-close' : 'modal-open'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form_control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"close-sign\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"\\xD7\"), React.createElement(\"div\", {\n    className: \"signup\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"SIGNUP\"), React.createElement(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"username-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(\"i\", {\n    class: \"fa fa-user icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    id: \"username\",\n    name: \"username\",\n    type: \"text\",\n    placeholder: \"Username\",\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    values: formik.values.username,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, formik.touched.username && formik.errors.username ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, formik.errors.username) : null), React.createElement(\"div\", {\n    className: \"password-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(\"i\", {\n    className: \"fa fa-key icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    id: \"password\",\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Password\",\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, formik.touched.password && formik.errors.password ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, formik.errors.password) : null), React.createElement(\"div\", {\n    className: \"image-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-upload icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"image\",\n    className: \"customed-upload\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"image\",\n    name: \"image\",\n    type: \"file\",\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"upload-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Upload image\"))), React.createElement(\"div\", {\n    className: \"form-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, formik.touched.image && formik.errors.image ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, formik.errors.image) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, imageName)), React.createElement(\"button\", {\n    className: \"signup-submit\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"submit\"))));\n};\n\nexport default SignupForm;","map":{"version":3,"sources":["/home/mayor/gidiShare2/frontend/src/components/signupModal.js"],"names":["React","useEffect","useDispatch","useFormik","Yup","useState","SignupForm","openSignup","imageName","setImageName","open","setOpen","handleClose","validate","values","errors","image","splitImagePath","split","length","imageExt","ext","supportedFormat","includes","formik","initialValues","password","username","validationSchema","object","string","min","required","onSubmit","alert","JSON","stringify","handleSubmit","handleChange","handleBlur","touched"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,SAAR,QAAwB,QAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AAEA,OAAO,sBAAP;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAkB;AAAA,oBACCF,QAAQ,CAAC,IAAD,CADT;AAAA;AAAA,QAC1BG,SAD0B;AAAA,QACfC,YADe;;AAAA,qBAETJ,QAAQ,CAAC,KAAD,CAFC;AAAA;AAAA,QAE1BK,IAF0B;AAAA,QAEpBC,OAFoB;;AAKjCV,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGM,UAAH,EAAc;AACVI,MAAAA,OAAO,CAAC,IAAD,CAAP;AACH;AACJ,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMC,WAAW,GAAG,MAAK;AACrBD,IAAAA,OAAO,CAAC,KAAD,CAAP;AACH,GAFD;;AAIA,QAAME,QAAQ,GAAGC,MAAM,IAAI;AACvB,UAAMC,MAAM,GAAG,EAAf;;AAGA,QAAG,CAACD,MAAM,CAACE,KAAX,EAAiB;AACbD,MAAAA,MAAM,CAACC,KAAP,GAAe,mBAAf;AACH,KAFD,MAEM,IAAGF,MAAM,CAACE,KAAV,EAAgB;AAClB;AACA,YAAMC,cAAc,GAAGH,MAAM,CAACE,KAAP,CAAaE,KAAb,CAAmB,IAAnB,CAAvB,CAFkB,CAGlB;;AACAT,MAAAA,YAAY,CAACQ,cAAc,CAACA,cAAc,CAACE,MAAf,GAAsB,CAAvB,CAAf,CAAZ;AACA,YAAMC,QAAQ,GAAGN,MAAM,CAACE,KAAP,CAAaE,KAAb,CAAmB,GAAnB,CAAjB;AACA,YAAMG,GAAG,GAAGD,QAAQ,CAACA,QAAQ,CAACD,MAAT,GAAgB,CAAjB,CAApB;AACA,YAAMG,eAAe,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,CAAxB;;AACA,UAAG,CAACA,eAAe,CAACC,QAAhB,CAAyBF,GAAzB,CAAJ,EAAkC;AAClCN,QAAAA,MAAM,CAACC,KAAP,GAAe,uDAAf;AACC;AACJ;;AAED,WAAOD,MAAP;AACH,GApBD;;AAqBA,QAAMS,MAAM,GAAGrB,SAAS,CAAC;AACrBsB,IAAAA,aAAa,EAAE;AACXC,MAAAA,QAAQ,EAAE,EADC;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXX,MAAAA,KAAK,EAAE;AAHI,KADM;AAMrBH,IAAAA,QANqB;AAQrBe,IAAAA,gBAAgB,EAAExB,GAAG,CAACyB,MAAJ,CAAW;AACzBH,MAAAA,QAAQ,EAAEtB,GAAG,CAAC0B,MAAJ,GACLC,GADK,CACD,CADC,EACE,wCADF,EAELC,QAFK,CAEI,4BAFJ,CADe;AAIzBL,MAAAA,QAAQ,EAAEvB,GAAG,CAAC0B,MAAJ,GACLC,GADK,CACD,CADC,EACE,wCADF,EAELC,QAFK,CAEI,sBAFJ;AAJe,KAAX,CARG;AAgBrBC,IAAAA,QAAQ,EAAEnB,MAAM,IAAI;AAChBoB,MAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAetB,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACH;AAlBoB,GAAD,CAAxB;AAqBA,SAEI;AAAK,IAAA,SAAS,EAAE,mBAAoB,CAACJ,IAAD,GAAQ,aAAR,GAAwB,YAA5C,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,OAAO,EAAEE,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAGI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,EAKI;AAAM,IAAA,QAAQ,EAAEY,MAAM,CAACa,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAG,IAAA,KAAK,EAAC,iBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI;AACI,IAAA,EAAE,EAAC,UADP;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,WAAW,EAAC,UAJhB;AAKI,IAAA,QAAQ,EAAEb,MAAM,CAACc,YALrB;AAMI,IAAA,MAAM,EAAEd,MAAM,CAACe,UANnB;AAOI,IAAA,MAAM,EAAEf,MAAM,CAACV,MAAP,CAAca,QAP1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ,EAcI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,MAAM,CAACgB,OAAP,CAAeb,QAAf,IAA2BH,MAAM,CAACT,MAAP,CAAcY,QAAzC,GACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMH,MAAM,CAACT,MAAP,CAAcY,QAApB,CADA,GACsC,IAF3C,CAdJ,EAmBI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAG,IAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI;AACI,IAAA,EAAE,EAAC,UADP;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,IAAI,EAAC,UAHT;AAII,IAAA,WAAW,EAAC,UAJhB;AAKI,IAAA,QAAQ,EAAEH,MAAM,CAACc,YALrB;AAMI,IAAA,MAAM,EAAEd,MAAM,CAACe,UANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAnBJ,EAgCI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKf,MAAM,CAACgB,OAAP,CAAed,QAAf,IAA2BF,MAAM,CAACT,MAAP,CAAcW,QAAzC,GACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMF,MAAM,CAACT,MAAP,CAAcW,QAApB,CADH,GAEE,IAHP,CAhCJ,EAsCI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,SAAS,EAAC,oBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAO,IAAA,OAAO,EAAC,OAAf;AAAuB,IAAA,SAAS,EAAC,iBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AACI,IAAA,EAAE,EAAC,OADP;AAEI,IAAA,IAAI,EAAC,OAFT;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,QAAQ,EAAEF,MAAM,CAACc,YAJrB;AAKI,IAAA,MAAM,EAAEd,MAAM,CAACe,UALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAQA;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARA,CAFJ,CAtCJ,EAqDI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCf,MAAM,CAACgB,OAAP,CAAexB,KAAf,IAAwBQ,MAAM,CAACT,MAAP,CAAcC,KAAtC,GACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOQ,MAAM,CAACT,MAAP,CAAcC,KAArB,CADP,GAEM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMR,SAAN,CAHP,CArDJ,EA4DI;AAAQ,IAAA,SAAS,EAAC,eAAlB;AAAkC,IAAA,IAAI,EAAC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5DJ,CALJ,CADA,CAFJ;AAyEH,CAlID;;AAoIA,eAAeF,UAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport {useDispatch} from 'react-redux'\nimport {useFormik} from 'formik'\nimport * as Yup from 'yup'\nimport {useState} from 'react'\n\nimport '../styles/signup.css'\n\nconst SignupForm = ({openSignup}) => {\n    const [imageName, setImageName] = useState(null)\n    const [open, setOpen] = useState(false)\n\n\n    useEffect(()=>{\n        if(openSignup){\n            setOpen(true)\n        }\n    }, [])\n\n    const handleClose = () =>{\n        setOpen(false)\n    }\n\n    const validate = values => {\n        const errors = {}\n        \n        \n        if(!values.image){\n            errors.image = 'Image is required'\n        }else if(values.image){\n            // set the name of the image here because of the customed file input\n            const splitImagePath = values.image.split('\\\\')\n            // values.image is split because validator often add fake path to the image\n            setImageName(splitImagePath[splitImagePath.length-1])\n            const imageExt = values.image.split('.')\n            const ext = imageExt[imageExt.length-1]\n            const supportedFormat = ['png', 'jpg', 'jpeg']\n            if(!supportedFormat.includes(ext)){\n            errors.image = \"The uploaded image is not in a supported image format\"\n            }\n        }\n\n        return errors\n    }\n    const formik = useFormik({\n        initialValues: {\n            password: '',\n            username: '',\n            image: null\n        },\n        validate,\n\n        validationSchema: Yup.object({\n            password: Yup.string()\n                .min(5, 'Password must be at least 5 characters')\n                .required('Password field is required'),\n            username: Yup.string()\n                .min(5, 'Username must be 5 characters at least')\n                .required('Username is required'),\n        }),\n        onSubmit: values => {\n            alert(JSON.stringify(values, null, 2))\n        }\n    })\n\n    return (\n\n        <div className={\"form-wrapper \"  + (!open ? 'modal-close' : 'modal-open')}>\n        <div className=\"form_control\">\n            <div className=\"close-sign\" onClick={handleClose}>&times;</div>\n\n            <div className='signup'>SIGNUP</div>\n            \n            <form onSubmit={formik.handleSubmit}>\n                <div className='username-wrapper'>\n                    <label htmlFor='username' />\n                    <i class=\"fa fa-user icon\"></i>\n                    <input\n                        id='username'\n                        name='username'\n                        type='text'\n                        placeholder='Username'\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        values={formik.values.username}\n                    />\n                </div>\n                <div className='form-error'>\n                    {formik.touched.username && formik.errors.username ? \n                    (<div>{formik.errors.username}</div>): null}\n                </div>\n\n                <div className='password-wrapper'>\n                    <label htmlFor='password' />\n                    <i className=\"fa fa-key icon\"></i>\n                    <input\n                        id='password'\n                        name='password'\n                        type='password'\n                        placeholder='Password'\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                    />\n                   \n                </div>\n                <div className='form-error'>\n                    {formik.touched.password && formik.errors.password ? (\n                        <div>{formik.errors.password}</div>\n                    ): null}\n                </div>\n\n                <div className='image-wrapper'>\n                    <i className=\"fas fa-upload icon\"></i>\n                    <label htmlFor='image' className='customed-upload'>\n                    <input\n                        id='image'\n                        name='image'\n                        type='file'\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                    />\n                    <div className='upload-label'>Upload image</div>\n\n                    </label>\n                   \n                </div>\n                <div className='form-error'>\n                {formik.touched.image && formik.errors.image ? (\n                        <div >{formik.errors.image}</div>\n                    ): <div>{imageName}</div>}\n                </div>\n\n\n                <button className='signup-submit' type='submit'>submit</button>\n            </form>\n        </div>\n    </div>\n    )\n}\n\nexport default SignupForm"]},"metadata":{},"sourceType":"module"}