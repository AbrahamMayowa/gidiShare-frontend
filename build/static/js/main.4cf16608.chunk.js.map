{"version":3,"sources":["redux/reducer/authReducer.js","redux/action/refreshAuth.js","redux/action/login.js","redux/action/createUserAction.js","redux/action/logout.js","redux/action/thumpAction.js","redux/reducer/images.js","redux/action/imageListAction.js","redux/reducer/singleImageReducer.js","redux/action/singleImage.js","redux/action/uploadAction.js","redux/store.js","components/Loading.js","redux/action/createUserThunk.js","components/SyncLoader.js","components/signupModal.js","components/ImageCard.js","redux/action/singleImageThunk.js","components/HeaderSection.js","components/Error.js","redux/action/thumpThunk.js","components/Footer.js","screen/ImageDetails.js","redux/action/uploadThunk.js","redux/action/imageListActionThunk.js","screen/UploadScreen.js","redux/action/loginThunk.js","components/Login.js","components/UploadForm.js","components/NoItem.js","screen/ImageList.js","redux/action/logoutThunk.js","redux/action/refreshTokenThunk.js","screen/ScreenWrapper.js","App.js","index.js"],"names":["initialState","error","isAuth","token","refreshToken","userId","expiresIn","username","imageUrl","loading","success","auth","state","action","type","payload","data","login","message","createUser","thumpDown","thumpData","thumpUp","updateSingleImageThumpUp","updateData","updateSingleImageThumpDown","images","imagesReducer","updateImages","imageIndex","findIndex","p","imageId","toString","thumpUpMutation","updateImagesDown","imageDownIndex","thumpDownMutation","imageList","creator","description","category","createdAt","thumpUpCount","userActionThumpUp","singleImageReducer","result","singleImage","uploadImage","persistConfig","key","storage","whitelist","reducers","combineReducers","persistedReducer","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","Loading","className","createUserThunk","password","image","formData","FormData","append","dispatch","a","async","console","log","fetch","method","body","res","ok","status","Error","json","imagePath","graphqlQuery","query","variables","headers","JSON","stringify","graphResponse","queryResponseJson","errors","SyncLoading","SignupForm","handleSignup","useDispatch","authData","useSelector","initialValues","validate","values","length","imageExt","name","split","ext","includes","onSubmit","props","handleSubmit","htmlFor","id","placeholder","onChange","handleChange","onBlur","handleBlur","touched","event","setFieldValue","currentTarget","files","onClick","SyncLoader","ImageCard","authError","useEffect","handleLogin","createdTime","Date","parseInt","toJSON","momentTime","moment","fromNow","thumpUpUser","thumpDownUser","find","_id","userActionThumpDown","isDetailsCard","detailsRedirect","src","alt","e","stopPropagation","handleThumpUp","handleThumpDown","class","thumpDownCount","singleImageFetch","response","Header","useState","search","setSearch","userImageUrl","setUserImageUrl","history","useHistory","propsImage","userImage","trim","target","value","push","thumpThunk","thumpUpResolver","Authorization","resData","Footer","href","DetailsScreen","matchId","this","match","params","prevProps","React","Component","withRouter","connect","uploadThunk","imageFileSave","imageData","graphqlResponse","imageListThunk","UploadImage","SingleData","uploadData","setUploadData","persist","prevState","preventDefault","selected","rows","loginActionThunk","LoginForm","handleLoginModal","handleUpload","to","NoItem","Images","handleDetailsRedirect","noImageOrImageCard","map","handleUploadForm","logoutDispatch","fetchResponse","fetchRefreshToken","resFetch","ScreenWrapper","openLoginModal","setOpenLogininModal","openSignupModal","setOpenSignupModal","openUploadFormModal","setOpenUploadFormModal","dispatchRefresh","refreshTokenThunk","newTokenTimeout","expirationDate","getTime","now","setTimeout","clearTimeout","timeoutId","setInterval","handleSignupModal","handleUploadModal","loginAndSignup","purge","Login","UploadForm","path","exact","render","ImageDetails","component","UploadScreen","ImageList","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4cf16608.chunk.js","sourcesContent":["import {SUCCESS_REFRESH_AUTH, FAILURE_REFRESH_AUTH, BEGINS_REFRESH_AUTH} from '../action/refreshAuth'\nimport {CREATE_USER_FAIL, CREATE_USER_START, CREATE_USER_SUCCESS} from '../action/createUserAction'\nimport {LOGIN_START, LOGIN_SUCCESS, LOGIN_FAIL} from '../action/login'\nimport {LOGOUT_START, LOGOUT_SUCCESS, LOGOUT_FAIL} from '../action/logout'\n\nconst initialState = {\n    error: '',\n    isAuth: false,\n    token: '',\n    refreshToken: '',\n    userId: '',\n    expiresIn: null,\n    username: '',\n    imageUrl: '',\n    loading: false,\n    success: false,\n    \n\n}\n\nconst auth = (state=initialState, action) => {\n    switch(action.type){\n        case SUCCESS_REFRESH_AUTH:\n            return {\n                ...state,\n                isAuth: true,\n                token: action.payload.data.refreshToken.token,\n                expiresIn: action.payload.data.refreshToken.expiresIn,\n                username: action.payload.data.refreshToken.username,\n                imageUrl: action.payload.data.refreshToken.imageUrl,\n                loading: false,\n                error: ''\n\n            }\n\n            case LOGIN_START:\n                return {\n                    ...state,\n                    loading: true,\n                }\n\n            case LOGIN_SUCCESS:\n                return {\n                    ...state,\n                    loading: false,\n                    isAuth: true,\n                    success: true,\n                    token: action.payload.data.login.token,\n                    refreshToken: action.payload.data.login.refreshToken,\n                    userId: action.payload.data.login.userId,\n                    expiresIn: action.payload.data.login.expiresIn,\n                    username: action.payload.data.login.username,\n                    imageUrl: action.payload.data.login.imageUrl,\n                    error: ''\n                }\n\n            case LOGIN_FAIL:\n                return {\n                    ...state,\n                    error: action.payload.message,\n                    isAuth: false,\n                    token: '',\n                    refreshToken: '',\n                    userId: '',\n                    expiresIn: null,\n                    username: '',\n                    imageUrl: '',\n                    loading: false\n                }\n\n        \n        case CREATE_USER_START:\n            return {\n                ...state,\n                loading: true\n            }\n        case CREATE_USER_SUCCESS:\n            return {\n                ...state,\n                isAuth: true,\n                token: action.payload.data.createUser.token,\n                refreshToken: action.payload.data.createUser.refreshToken,\n                userId: action.payload.data.createUser.userId,\n                expiresIn: action.payload.data.createUser.expiresIn,\n                username: action.payload.data.createUser.username,\n                imageUrl: action.payload.data.createUser.imageUrl,\n                loading: false,\n                success: true,\n                error: ''\n            }\n\n        case CREATE_USER_FAIL:\n            \n            return {\n                ...state,\n                error: action.payload.message,\n                isAuth: false,\n                token: '',\n                refreshToken: '',\n                userId: '',\n                expiresIn: null,\n                username: '',\n                imageUrl: '',\n                loading: false\n            }\n\n        case LOGOUT_SUCCESS:\n            return {\n                error: '',\n                isAuth: false,\n                token: '',\n                refreshToken: '',\n                userId: '',\n                expiresIn: null,\n                username: '',\n                imageUrl: '',\n                loading: false,\n                success: false,\n            }\n\n        case LOGOUT_FAIL:\n            return {\n                ...state,\n                error: action.payload.message,\n                loading: false\n            }\n\n        case 'CLEAR_ERROR':\n            return{\n                ...state,\n                error: ''\n            }\n\n        default: \n            return {...state}\n    }\n}\n\nexport default auth","export const  BEGINS_REFRESH_AUTH = 'BEGINS_REFRESH_AUTH'\nexport const SUCCESS_REFRESH_AUTH = 'SUCCESS_REFRESH_AUTH'\nexport const FAILURE_REFRESH_AUTH = 'FAILURE_REFRESH_AUTH'\n\n\nexport const beginRefreshAuth = () => {\n    return {\n        type: BEGINS_REFRESH_AUTH\n    }\n}\n\nexport const successRefreshAuth = (result) =>{\n    return {\n        type: SUCCESS_REFRESH_AUTH,\n        payload: result\n    }\n}\n\nexport const failedRefreshAuth = (error) =>{\n    return {\n        type: FAILURE_REFRESH_AUTH,\n        payload: error\n    }\n}","export const LOGIN_START = 'LOGIN_START'\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\nexport const LOGIN_FAIL = 'LOGIN_FAIL'\n\n\nexport const loginStart = () =>{\n    return {\n        type: LOGIN_START\n    }\n}\n\n\nexport const loginSuccess = (result) =>{\n    return {\n        type: LOGIN_SUCCESS,\n        payload: result\n\n    }\n}\n\n\nexport const loginFail = (loginError) =>{\n    return {\n        type: LOGIN_FAIL,\n        payload: loginError\n    }\n}\n\n\n","export const CREATE_USER_START = 'CREATE_USER_START'\n\nexport const CREATE_USER_SUCCESS = 'CREATE_USER_SUCCESS'\n\nexport const CREATE_USER_FAIL = 'CREATE_USER_FAIL'\n\nexport const createUserStartDispatch = () =>{\n    return {\n        type: CREATE_USER_START\n    }\n}\n\n\n\nexport const createUserSuccessDispatch = (newUser) =>{\n    return {\n        type: CREATE_USER_SUCCESS,\n        payload: newUser\n    }\n} \n\nexport const createUserFailDispatch = (createError) =>{\n    return {\n        type: CREATE_USER_FAIL,\n        payload: createError\n    }\n}","import { LOGIN_FAIL } from \"./login\";\n\nexport const LOGOUT_START = 'LOGOUT_START'; export const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS'; export const LOGOUT_FAIL = 'LOGOUyAIL'\n\nexport const logoutStart = ()=>{\n    return {\n        type: LOGOUT_START\n    }\n}\n\nexport const logoutSuccess = (isLogout)=>{\n    return {\n        type: LOGOUT_SUCCESS,\n        payload: isLogout\n    }\n}\n\nexport const logoutFail = (error)=>{\n    return {\n        type: LOGIN_FAIL,\n        payload: error\n    }\n}","export const THUMP_BEGIN = 'THUMP_BEGIN'; export const THUMP_DOWN = 'THUMP_DOWN'; export const THUMP_UP = 'THUMP_UP'\nexport const UPDATE_SINGLE_IMAGE_THUMP_UP = 'UPDATE_SINGLE_IMAGE_THUMP_UP'\nexport const UPDATE_SINGLE_IMAGE_THUMP_DOWN = 'UPDATE_SINGLE_IMAGE_THUMP_DOWN'\n\nexport const thumpBegin = () =>{\n    return {\n        type: THUMP_BEGIN \n    }\n}\n\n\nexport const thumpDown = (thumpData) =>{\n    return {\n        type: THUMP_DOWN,\n        payload: thumpData\n    }\n}\n\n\nexport const thumpUp = (thumpData) =>{\n    return {\n        type: THUMP_UP,\n        payload: thumpData\n    }\n}\n\nexport const updateSingleImageThumpUp = (updateData)=>{\n    return {\n        type: UPDATE_SINGLE_IMAGE_THUMP_UP,\n        payload: updateData\n    }\n}\n\nexport const updateSingleImageThumpDown = (updateData)=>{\n    return {\n        type: UPDATE_SINGLE_IMAGE_THUMP_DOWN,\n        payload: updateData\n    }\n}","import {START_FETCH_LIST, FAIL_FETCH_LIST, SUCCESS_FETCH_LIST} from '../action/imageListAction'\nimport {THUMP_DOWN, THUMP_UP, THUMP_BEGIN} from '../action/thumpAction'\n\nconst initialState = {\n    loading: false,\n    images: [],\n    error: ''\n}\n\nconst imagesReducer = (state=initialState, action) => {\n    switch(action.type){\n        case THUMP_BEGIN:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case THUMP_UP:\n            const updateImages = [...state.images]\n            const imageIndex = updateImages.findIndex(p => p.imageId.toString() === action.payload.data.thumpUpMutation.imageId.toString())\n            if(imageIndex > -1){\n                updateImages[imageIndex].thumpUp = action.payload.data.thumpUpMutation.thumpUp\n                updateImages[imageIndex].thumpDown = action.payload.data.thumpUpMutation.thumpDown\n            }\n            return{\n                ...state,\n                images: updateImages,\n                loading: false\n\n            }\n\n        case THUMP_DOWN:\n            const updateImagesDown = [...state.images]\n            const imageDownIndex = updateImagesDown.findIndex(p => p.imageId.toString() === action.payload.data.thumpDownMutation.imageId.toString())\n            if(imageDownIndex > -1){\n                updateImagesDown[imageDownIndex].thumpUp = action.payload.data.thumpDownMutation.thumpUp\n                updateImagesDown[imageDownIndex].thumpDown = action.payload.data.thumpDownMutation.thumpDown\n            }\n            return{\n                ...state,\n                images: updateImagesDown,\n                loading: false\n\n            }\n\n\n        case START_FETCH_LIST:\n            return {\n                ...state,\n                loading: true\n            }\n        case SUCCESS_FETCH_LIST:\n            return{\n                ...state,\n                loading: false,\n                images: action.payload.images.data.imageList\n            }\n        case FAIL_FETCH_LIST:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error.message\n            }\n        default:\n            return state\n\n    }\n}\n\nexport default imagesReducer","export const START_FETCH_LIST = 'START_FETCH_LIST'\nexport const SUCCESS_FETCH_LIST = 'SUCCESS_FETCH_LIST'\nexport const FAIL_FETCH_LIST = 'FAIL_FETCH_LIST'\n\nexport const startFetchList = () =>{\n    return {\n        type: START_FETCH_LIST\n    }\n}\n\nexport const successFetchList = (images) =>{\n    return {\n        type: SUCCESS_FETCH_LIST,\n        payload: {images}\n    }\n}\n\nexport const failFetchList = (error) =>{\n    return {\n        type: FAIL_FETCH_LIST,\n        payload: {error}\n    }\n}\n\n","import {SINGLE_IMAGE_FETCH_FAILS, SINGLE_IMAGE_FETCH_STARTS, SINGLE_IMAGE_FETCH_SUCCESS} from '../action/singleImage'\nimport {UPLOAD_FAIL, UPLOAD_STARTS, UPLOAD_SUCCESS} from '../action/uploadAction'\nimport {UPDATE_SINGLE_IMAGE_THUMP_DOWN, UPDATE_SINGLE_IMAGE_THUMP_UP} from '../action/thumpAction'\n\nconst initialState = {\n    loading: false,\n    error: '',\n    imageId: '',\n    imageUrl: '',\n    creator: {},\n    description: '',\n    category: '',\n    createdAt: null,\n    thumpUp: {\n        thumpUpCount: null,\n        userActionThumpUp: []\n    },\n    thumpDown: {\n        thumpUpCount: null,\n        userActionThumpUp: []\n    },\n    success: false\n\n}\n\nconst singleImageReducer = (state=initialState, action) =>{\n    switch(action.type){\n        case SINGLE_IMAGE_FETCH_STARTS:\n            return {\n                ...state,\n                loading: true\n            }\n        case SINGLE_IMAGE_FETCH_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                error: null,\n                imageUrl: action.payload.result.data.singleImage.imageUrl,\n                imageId: action.payload.result.data.singleImage.imageId,\n                creator: action.payload.result.data.singleImage.creator,\n                description: action.payload.result.data.singleImage.description,\n                category: action.payload.result.data.singleImage.category,\n                createdAt: action.payload.result.data.singleImage.createdAt,\n                thumpUp: action.payload.result.data.singleImage.thumpUp,\n                thumpDown: action.payload.result.data.singleImage.thumpDown,\n                success: true\n            }\n        case SINGLE_IMAGE_FETCH_FAILS:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error.message,\n                success: false\n            }\n\n        case UPLOAD_STARTS:\n            return {\n                ...state,\n                error: null,\n                loading: true,\n            }\n        case UPLOAD_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                error: null,\n                imageUrl: action.payload.result.data.uploadImage.imageUrl,\n                imageId: action.payload.result.data.uploadImage.imageId,\n                creator: action.payload.result.data.uploadImage.creator,\n                description: action.payload.result.data.uploadImage.description,\n                category: action.payload.result.data.uploadImage.category,\n                createdAt: action.payload.result.data.uploadImage.createdAt,\n                thumpUp: action.payload.result.data.uploadImage.thumpUp,\n                thumpDown: action.payload.result.data.uploadImage.thumpDown,\n                success: true\n            }\n        case UPLOAD_FAIL:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error.message,\n                success: false\n            }\n\n        case UPDATE_SINGLE_IMAGE_THUMP_UP:\n            const thumpUpMutation = action.payload.data.thumpUpMutation\n            return{\n                ...state,\n                imageId: thumpUpMutation.imageId,\n                thumpUp: thumpUpMutation.thumpUp,\n                thumpDown: thumpUpMutation.thumpDown,\n                loading: false\n            }\n        case UPDATE_SINGLE_IMAGE_THUMP_DOWN:\n            const thumpDownMutation = action.payload.data.thumpDownMutation\n            return {\n                ...state,\n                imageId: thumpDownMutation.imageId,\n                thumpUp: thumpDownMutation.thumpUp,\n                thumpDown: thumpDownMutation.thumpDown,\n                loading: false\n            }\n        default:\n            return state\n            \n    }\n}\n\nexport default singleImageReducer","export const SINGLE_IMAGE_FETCH_STARTS = 'SINGLE_IMAGE_FETCH_STARTS'\nexport const SINGLE_IMAGE_FETCH_SUCCESS = 'SINGLE_IMAGE_FETCH_SUCCESS'\nexport const SINGLE_IMAGE_FETCH_FAILS = 'SINGLE_IMAGE_FETCH_FAILS'\n\n\nexport const singleImageStarts = () =>{\n    return {\n        type: SINGLE_IMAGE_FETCH_STARTS\n    }\n}\n\nexport const singleImageSuccess = (result) =>{\n    return {\n        type: SINGLE_IMAGE_FETCH_SUCCESS,\n        payload: {result}\n    }\n}\n\n\nexport const singleImageFails = (error) =>{\n    return {\n        type: SINGLE_IMAGE_FETCH_FAILS,\n        payload: {error}\n    }\n}","export const UPLOAD_STARTS = 'UPLOAD_STARTS'\nexport const UPLOAD_SUCCESS = 'UPLOAD_SUCCESS'\nexport const UPLOAD_FAIL = 'UPLOAD_FAIL'\n\n\nexport const uploadStarts = () => {\n    return {\n        type: UPLOAD_STARTS\n    }\n}\n\nexport const uploadSuccess = (result) => {\n    return {\n        type: UPLOAD_SUCCESS,\n        payload: {result}\n    }\n}\n\nexport const uploadFail = (error ) =>{\n    return {\n        type: UPLOAD_FAIL,\n        payload: {error}\n    }\n}               ","import {createStore, combineReducers, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport {persistReducer, persistStore} from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport auth from './reducer/authReducer'\nimport images from './reducer/images'\nimport singleImage from './reducer/singleImageReducer'\nimport {composeWithDevTools} from 'redux-devtools-extension'\n\n// redux-persist configuration\nconst persistConfig = {\n    key: 'root',\n    storage,\n    whitelist: ['auth']\n  }\n   \n\n// the combine reducers\nconst reducers = combineReducers({\n    auth,\n   images,\n    singleImage\n})\n \nconst persistedReducer = persistReducer(persistConfig, reducers)\nexport const store = createStore(persistedReducer, composeWithDevTools(applyMiddleware(thunk)))\nexport const persistor = persistStore(store)\n","import CircleLoader from \"react-spinners/ClipLoader\"\nimport React from 'react'\nimport '../styles/loading.css'\n\nconst Loading =() => {\n    return <div className='loading'><CircleLoader /> </div>\n\n}\n\nexport default Loading","import {createUserFailDispatch, createUserStartDispatch, createUserSuccessDispatch} from './createUserAction'\n\n\nconst createUserThunk = (username, password, image) =>{\n    const formData = new FormData()\n    formData.append('image', image)\n    return async dispatch => {\n        try{\n        dispatch(createUserStartDispatch())\n        console.log('starting')\n        const res = await fetch('/api/create-user', {\n            method: 'POST',\n            body: formData\n\n        })\n        if(!res.ok){\n            if(res.status === 422){\n                throw new Error('Invalid Input')\n            }\n            throw new Error('An error occured')\n        }\n\n        const data = await res.json()\n\n        const imageUrl = data.imageUrl\n        const imagePath = data.imagePath\n\n        const graphqlQuery = {\n            query: `\n            mutation createFunc($username: String!, $password: String!, $imageUrl: String!, $imagePath: String!){\n                createUser(userData: {username: $username, password: $password, imageUrl: $imageUrl, imagePath: $imagePath}){\n                    token\n                    refreshToken\n                    userId\n                    expiresIn\n                    username\n                    imageUrl\n                }\n            }\n            `,\n            variables: {\n                username,\n                password,\n                imageUrl,\n                imagePath,\n            }\n        }\n\n        const graphResponse = await fetch('/graphql', {\n            method: 'POST',\n            headers: {\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const queryResponseJson = await graphResponse.json()\n        if(queryResponseJson.errors){\n            if(queryResponseJson.errors[0].status === 422){\n                throw new Error(queryResponseJson.errors[0].message)\n            }\n            throw new Error('A server error occured!')\n        }\n\n        dispatch(createUserSuccessDispatch(queryResponseJson))\n        }catch(error){\n            dispatch(createUserFailDispatch(error))\n        }\n    }\n}\n\nexport default createUserThunk","import {SyncLoader} from \"react-spinners\"\nimport React from 'react'\n\nconst SyncLoading =() => {\n    return <SyncLoader />\n\n}\n\nexport default SyncLoading","import React, { useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Formik} from 'formik'\nimport createUserThunk from '../redux/action/createUserThunk'\nimport SyncLoader from './SyncLoader'\nimport '../styles/signup.css'\nimport { store } from '../redux/store'\n\nconst SignupForm = ({handleSignup}) => {\n   const dispatch = useDispatch()\n   const authData = useSelector(store => store.auth)\n   const {error, success, loading} = authData\n\n    const validate = values => {\n        const errors = {}\n        \n        if(!values.username){\n                errors.username = 'Username is required'\n            }else if(values.username.length < 4){\n                errors.username = 'Username should be at least four characters long'\n            }else if(!values.password){\n                errors.password = 'Password is required'\n            }else if(values.password.length < 4){\n                errors.password = 'Password should be at least four characters long'\n            }else if(!values.image){\n                errors.image = 'Image is required'\n            }else if(values.image){\n                const imageExt = values.image.name.split('.')\n                const ext = imageExt[imageExt.length-1]\n                const supportedFormat = ['png', 'jpg', 'jpeg']\n                if(!supportedFormat.includes(ext)){\n                errors.image = \"The uploaded image is not in a supported image format\"\n                }\n        }\n\n        return errors\n    }\n\n    return (\n    <Formik\n        initialValues = {{\n            password: '',\n            username: '',\n            image: null\n        }}\n        validate = {validate}\n        onSubmit= {values => dispatch(createUserThunk(values.username, values.password, values.image))}\n        >\n        \n        {props => (\n        <div className=\"form-wrapper\">\n        <div className=\"form_control\">\n\n            <div className='signup'>SIGNUP</div>\n\n\n\n            \n            <form onSubmit={props.handleSubmit}>\n                <div className='username-wrapper'>\n                    <label htmlFor='username' />\n                    <i className=\"fa fa-user icon\"></i>\n                    <input\n                        id='username'\n                        name='username'\n                        type='text'\n                        placeholder='Username'\n                        onChange={props.handleChange}\n                        onBlur={props.handleBlur}\n                        values={props.values.username}\n                    />\n                </div>\n                <div className='form-error'>\n                    {props.touched.username && props.errors.username ? \n                    (<div>{props.errors.username}</div>): null}\n                </div>\n\n                <div className='password-wrapper'>\n                    <label htmlFor='password' />\n                    <i className=\"fa fa-key icon\"></i>\n                    <input\n                        id='password'\n                        name='password'\n                        type='password'\n                        placeholder='Password'\n                        onChange={props.handleChange}\n                        onBlur={props.handleBlur}\n                    />\n                   \n                </div>\n                <div className='form-error'>\n                    {props.touched.password && props.errors.password ? (\n                        <div>{props.errors.password}</div>\n                    ): null}\n                </div>\n\n                <div className='image-wrapper'>\n                    <i className=\"fas fa-upload icon\"></i>\n                    <label htmlFor='image' className='customed-upload'>\n                    <input\n                        id='image'\n                        name='image'\n                        type='file'\n                        onChange={(event) =>{\n                            props.setFieldValue(\"image\", event.currentTarget.files[0]);\n                        }}\n                        onBlur={props.handleBlur}\n                    />\n                    <div className='upload-label'>Upload image</div>\n\n                    </label>\n                   \n                </div>\n                <div className='form-error'>\n                {props.touched.image && props.errors.image ? \n                props.errors.image : null }\n                \n                {props.values.image && (<div className='image-name'>{props.values.image.name}</div>)}\n                </div>\n                <div className='cancel-signup-wrapper'>\n                    <div className='cancel-signup' onClick={handleSignup}>Cancel</div>\n                    <button className='signup-submit' type='submit'>{loading ? <div className='load'><SyncLoader /></div> : 'Submit'}</button>\n                  \n                </div>\n            </form>\n            {error && (<div className='reducer-error'>{error}</div>)}\n            {success && (<div className='reducer-success'>You have successfully created an account</div>)}\n        </div>\n    </div>\n        )}\n    </Formik>\n    )\n}\n\nexport default SignupForm","import React, {useEffect} from 'react'\nimport {useSelector} from 'react-redux'\nimport '../styles/imageCard.css'\nimport moment from 'moment'\n\n\nconst ImageCard = (props) =>{\n    const authError = useSelector(store => store.images.error) \n    const userId = useSelector(store => store.auth.userId)\n    useEffect(()=>{\n        if(authError === 'You are not authorized'){\n            props.handleLogin()\n        }\n    }, [authError])\n    \n    const image = props.image\n    const createdTime = new Date(parseInt(image.createdAt)).toJSON()\n    const momentTime = moment(createdTime).fromNow()\n    let thumpUpUser = null\n    let thumpDownUser = null\n\n\n        // check if user is authenticated to know if the user had thumped the image\n        if(userId && image){\n                thumpUpUser = !!image.thumpUp.userActionThumpUp.find(id => id._id === userId)\n            }\n            \n            if(image.thumpDown.userActionThumpDown){\n                thumpDownUser = !!image.thumpDown.userActionThumpDown.find(id => id._id === userId)\n            }\n\n    return(\n            <div key={image.imageId} className={'card-wrapper ' + (props.isDetailsCard && 'details_card' )} onClick={() => {\n                if(props.detailsRedirect){\n                    props.detailsRedirect(image.imageId)\n                }\n                    \n            }\n            }\n            >\n\n                 <section className='creator'>\n                    <div className='creator-image-wrapper'>\n                        <img src={`/static/${image.creator.imageUrl}`} alt='creator'/> \n                    </div>\n                    <div className='username'>{image.creator.username}</div>\n                </section>\n                    \n                <section className='image-url'>\n                    <img src={`/static/${image.imageUrl}`} alt=\"share\"/>\n                </section>\n\n                <section className='data-description'>\n                    <div className='thump'>\n                        <div className=\"thump\" onClick={(e) =>{\n                            e.stopPropagation()\n                            props.handleThumpUp(image.imageId)\n                        }}>\n\n                        <i className={\"far fa-thumbs-up thumpup-icon \" + (thumpUpUser ? 'thumped' : '')}></i>\n                        <div className='thump-count '>\n                            {image.thumpUp.thumpUpCount}\n                        </div>\n\n\n                        </div>\n                        <div className='thump' onClick={(e)=>{\n                            e.stopPropagation()\n                            props.handleThumpDown(image.imageId)\n                        }}>\n                        <i class={\"far fa-thumbs-down thumpdown-icon \" + (thumpDownUser ? 'thumped' : '')}></i>\n                        <div className='thump-count '>\n                        {image.thumpDown.thumpDownCount}\n                        </div>\n                        </div>\n\n                    </div>\n\n                    <div className='description'>\n                        {image.description}\n                    </div>\n                \n                </section>\n                <div className='time-category'>\n                        <div className='moment-time'>{momentTime}</div>\n                        <div className='category'>{image.category}</div>\n                </div>\n            </div>\n        )\n}\n\nexport default ImageCard","import {singleImageFails, singleImageStarts, singleImageSuccess} from './singleImage'\n\n\nconst singleImageFetch = id =>{\n    return async dispatch => {\n        try{\n        dispatch(singleImageStarts())\n\n        const graphqlQuery = {\n            query:`\n            query single($_id: ID!){\n                singleImage(_id: $_id){\n                    imageUrl\n                    imageId\n                    creator {\n                        username\n                        imageUrl\n                    }\n                    description\n                    category\n                    createdAt\n                    thumpUp {\n                        thumpUpCount\n                        userActionThumpUp {\n                            _id\n                        }\n                    }\n                    thumpDown {\n                        thumpDownCount\n                        userActionThumpDown{\n                            _id\n                        }\n                    }  \n                }\n            }`,\n            variables: {\n                _id: id\n            }\n        }\n\n        const response = await fetch('/graphql',{\n            method:'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const data = await response.json()\n        if(data.errors){\n            if(data.errors[0].status === 404){\n                throw new Error('The selected image is not found')\n            }\n            throw new Error('A server error occured')\n        }\n\n        dispatch(singleImageSuccess(data))\n        }catch(error){\n            dispatch(singleImageFails(error))\n        }\n    }\n\n}\n\nexport default singleImageFetch\n","import React, {useState, useEffect} from 'react'\nimport {useSelector} from 'react-redux'\nimport {useHistory} from 'react-router-dom'\nimport '../styles/header.css'\nimport { store } from '../redux/store'\n\n\nconst Header = (props)=>{\n    const [search, setSearch] = useState('')\n    const [userImageUrl, setUserImageUrl] = useState('')\n    const auth = useSelector(store => store.auth)\n    let history = useHistory()\n\n    const handleSearchSubmit = () =>{\n        if(search.trim().length > 0){\n            // send query for the search\n        }\n        /// set feedback messages from the parent component\n    }\n\n    const handleRedirect = () =>{\n        \n            //props.handleUpload()\n            history.push(\"/upload\")\n    }\n\n    useEffect(() =>{\n        const propsImage = props.userImageUrl\n        let userImage = \"/avatar.svg\"\n        if(propsImage){\n            userImage = `/static/${propsImage}`\n        }\n        setUserImageUrl(userImage)\n        \n    }, [props.userImageUrl])\n\n\n    \n    return(\n        <div className='header'>\n            <div className='header-image'>\n                <img src={userImageUrl} />\n            </div>\n            <div className='search-header'>\n                <form onSubmit={handleSearchSubmit}>\n                    <input placeholder='Search for image' type='text' onChange={(e) => setSearch(e.target.value)}/>\n                </form>\n            </div>\n\n            <div className='share-image' onClick={handleRedirect}>\n            <img src='/shareFile.png' alt='share a image' /> \n            <div className='photo-string'>Photo</div>\n            </div>\n        </div>\n    )\n}\n\nexport default Header","import React from 'react'\nimport '../styles/error.css'\n\nconst Error = (props)=>{\n    return (\n        <div className='error-page'>\n            {props.error}\n        </div>\n    )\n}\n\nexport default Error","import {thumpDown, thumpUp, updateSingleImageThumpDown, updateSingleImageThumpUp} from './thumpAction'\n\n\nconst thumpThunk = (imageId, token, thumpUpResolver = true)=>{\n\n    return async dispatch =>{ \n        //dispatch(thumpBegin())\n\n    // thumpUpResolver is true if the thunk will make a fetch request to thumpUpMutation\n    let graphqlQuery\n\n    if(thumpUpResolver){\n        graphqlQuery = {\n            query: `\n            mutation thumpUp($imageId: ID!){\n                thumpUpMutation(imageId: $imageId){\n                    thumpUp{\n                        thumpUpCount\n                        userActionThumpUp{\n                            _id\n                        }\n                    }\n\n                    imageId\n                    thumpDown{\n                        thumpDownCount\n                        userActionThumpDown{\n                            _id\n                        }\n                    }\n\n                }\n            }`,\n            variables:{\n                imageId:imageId\n            }\n        }\n\n    }else{\n        graphqlQuery = {\n            query: `\n            mutation thumpDown($imageId: ID!){\n                thumpDownMutation(imageId: $imageId){\n                    thumpUp{\n                        thumpUpCount\n                        userActionThumpUp{\n                            _id\n                        }\n                    }\n                    imageId\n                    thumpDown{\n                        thumpDownCount\n                        userActionThumpDown{\n                            _id\n                        }\n                    }\n\n                }\n            }`,\n            variables:{\n                imageId\n            }\n\n        }\n    }\n\n    try{\n\n        const response = await fetch('/graphql',{\n            method: 'POST',\n            headers:{\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + token\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const resData = await response.json()\n        if(resData.errors){\n            if(resData.errors[0].status === 401){\n                throw Error('You are not authorized')\n            }\n            throw Error('Image not found')\n        }\n\n        //check if the resolve if for thump up mutation\n        if(thumpUpResolver){\n            dispatch(updateSingleImageThumpUp(resData))\n            dispatch(thumpUp(resData))\n        }else{\n            dispatch(updateSingleImageThumpDown(resData))\n            dispatch(thumpDown(resData))\n        }\n    }catch(error){\n        console.log(error)\n        //dispatch(thumpFail(error))\n    }\n}\n}\n\nexport default thumpThunk","import React from 'react'\nimport '../styles/footer.css'\n\nconst Footer = () =>{\n    return(\n        <div className='footer-wrapper'>\n            <section className='website-wrapper'>\n                <div className='name-footer'>gidiShare</div>\n                <div className='social-media'>\n                <a href='https://github.com/AbrahamMayowa'><i class=\"fab fa-github media-icon\"></i></a>\n                <a href='https://twitter.com/mayowa_life'><i class=\"fab fa-twitter media-icon\"></i></a>\n                </div>\n            </section>\n            <section className='copywrite'>\n            &copy; 2020 GidiShare. All Right Reserved\n                \n            </section>\n\n        </div>\n    )\n}\n\nexport default Footer","import React, {useEffect} from 'react'\nimport {connect} from 'react-redux'\nimport {withRouter} from 'react-router-dom'\nimport ImageCard from '../components/ImageCard'\nimport singleImageThunk from '../redux/action/singleImageThunk'\nimport singleImageFetch from '../redux/action/singleImageThunk'\nimport Loading from '../components/Loading'\nimport Header from '../components/HeaderSection'\nimport Error from '../components/Error'\nimport thumpThunk from '../redux/action/thumpThunk'\nimport '../styles/detailsScreen.css'\nimport Footer from '../components/Footer'\n\nclass DetailsScreen extends React.Component{\n\n    componentDidMount(){\n        const matchId = this.props.match.params.id\n        this.props.dispatch(singleImageFetch(matchId))\n    }\n\n    componentDidUpdate(prevProps){\n        if(this.props.auth.success !== prevProps.auth.success){\n            this.props.handleLogin()\n        }\n    }\n\n\n    handleThumpUp = (imageId) =>{\n        const token = this.props.auth.token\n        if(!token){\n            this.props.handleLogin()\n        }else{\n            this.props.dispatch(thumpThunk(imageId, token))\n        }\n    }\n\n\n    handleThumpDown = (imageId)=>{\n        const token = this.props.auth.token\n        if(!token){\n            this.props.handleLogin()\n        }else{\n            this.props.dispatch(thumpThunk(imageId, token, false))\n        }\n\n    }\n\n\n    render(){\n        const singleImage = this.props.singleImage\n        const {loading, error} = {...singleImage}\n        const {imageUrl} = {...this.props.auth}\n    \n    if(loading){\n        return <Loading />\n    }\n    else if(error){\n        return <Error error={error} />\n    }else{\n    return (\n        <div className='details'>\n            <Header userImageUrl={imageUrl} handleLogin={this.props.handleLogin} />\n                <ImageCard image={singleImage} handleLogin={this.props.handleLogin} \n                    handleThumpUp={this.handleThumpUp} handleThumpDown={this.handleThumpDown} isDetailsCard={true}/>\n            < Footer />\n        </div>\n    )\n    }\n\n}\n}\n\nconst mapPropToState = state =>{\n    return {\n        singleImage: state.singleImage,\n        auth: state.auth\n    }\n}\n\nexport default withRouter(connect(mapPropToState)(DetailsScreen))","import {uploadFail, uploadStarts, uploadSuccess} from './uploadAction'\n\n\nconst uploadThunk = (image, description, category, token) =>  {\n    return async dispatch => {\n        try{\n        dispatch(uploadStarts())\n        const formData = new FormData()\n        formData.append('image', image)\n        const imageFileSave = await fetch('/api/upload', {\n            method: 'PUT',\n            headers: {\n                Authorization: 'Bearer ' + token\n            },\n            body: formData\n\n        })\n\n        if(!imageFileSave.ok){\n            if(imageFileSave.status === 401){\n                throw new Error('Please log in to upload image')\n            }\n            throw new Error('A server error occured')\n        }\n\n        const imageData = await imageFileSave.json()\n\n        // the graphql for storing the image in the db\n        const graphqlQuery = {\n            query: `\n            mutation uploadMutation($imageUrl: String!, $description: String!, $category: String!){\n                uploadImage(imageUrl: $imageUrl, description: $description, category: $category){\n                    imageUrl\n                    imageId\n                    creator {\n                        username\n                        imageUrl\n                    }\n                    description\n                    category\n                    createdAt\n                    thumpUp {\n                        thumpUpCount\n                        userActionThumpUp {\n                            _id\n                        }\n                    }\n                    thumpDown {\n                        thumpDownCount\n                        userActionThumpDown{\n                            _id\n                        }\n                    }\n                }\n            }`,\n            variables: {\n                imageUrl: imageData.imageUrl,\n                description: description,\n                category: category\n            }\n        }\n        const graphqlResponse = await fetch('/graphql', {\n            method: 'POST',\n            headers: {\n                Authorization: 'Bearer ' + token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const resData = await graphqlResponse.json()\n        if(resData.errors){\n            if(resData.errors[0].status === 401){\n                throw new Error('You need to log in')\n            }\n            throw new Error('Please provide valid input')\n        }\n\n        dispatch(uploadSuccess(resData))\n    }catch(error){\n        dispatch(uploadFail(error))\n    }\n\n\n    }\n}\n\nexport default uploadThunk","import {failFetchList, startFetchList, successFetchList} from './imageListAction'\n\nconst imageListThunk = () => {\n    return async (dispatch) => {\n        try{\n        dispatch(startFetchList())\n        const graphqlQuery = {\n            query: `\n            query images{\n                imageList {\n                    imageUrl\n                    imageId\n                    creator {\n                        username\n                        imageUrl\n                    }\n                    description\n                    category\n                    createdAt\n                    thumpUp {\n                        thumpUpCount\n                        userActionThumpUp {\n                            _id\n                        }\n                    }\n                    \n                    thumpDown {\n                        thumpDownCount\n                        userActionThumpDown {\n                            _id\n                        }\n                    }\n\n                }\n\n            }\n            `\n        }\n        const response = await fetch('/graphql', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const resData = await response.json()\n      \n\n        if(resData.errors){\n            if(resData.errors[0].status === 404){\n                throw new Error('No image found')\n            }\n            throw new Error('A server error occured')\n        }\n\n        dispatch(successFetchList(resData))\n    }catch(error){\n        dispatch(failFetchList(error))\n    }\n\n\n\n    } \n}\n\nexport default imageListThunk","import React, { useEffect, useState} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Redirect} from 'react-router-dom'\nimport {Formik} from 'formik'\nimport Loading from '../components/Loading'\n//import '../styles/signup.css'\nimport '../styles/uploadForm.css'\nimport uploadThunk from '../redux/action/uploadThunk'\nimport TextareaAutosize from 'react-autosize-textarea'\nimport imageListThunk from '../redux/action/imageListActionThunk'\nimport SyncLoader from '../components/SyncLoader' \n\nconst UploadImage = (props) => {\n   const dispatch = useDispatch()\n   const SingleData = useSelector(store => store.singleImage)\n   const token = useSelector(store => store.auth.token)\n   const {error, success, loading, imageId} = SingleData\n   const [uploadData, setUploadData] = useState({\n       category: {error: '', value: ''},\n       description: {error: '', value: ''},\n       image:{error: '', value: null}\n    })\n\n    const handleChange = (event)=>{\n        event.persist()\n        const target = event.target;\n            if(target.name === 'category'){\n                if(!target.value){\n                    setUploadData(prevState => ({\n                        ...prevState,\n                        category: {error: 'Category is required', value: '',}\n                    }))\n                }else{\n                    setUploadData(prevState =>({\n                        ...prevState,\n                        category: {error: '', value: target.value}\n                    }))\n                }\n            }else if(target.name === 'description'){\n                if(!target.value){\n                    setUploadData(prevState =>({\n                        ...prevState,\n                        description:{error: 'Description is required', value: ''}\n                    }))\n                }else{\n                    setUploadData(prevState => ({\n                        ...prevState,\n                        description: {error: '', value: target.value}\n                    }))\n                }\n            }\n\n            else if(target.name === 'image'){\n                \n                if(!target.files[0]){\n                    setUploadData(prevState =>({\n                        ...prevState,\n                        image: {error: 'Image is required', value: ''}\n                    }))\n                }else if(target.files[0]){\n                    const supportedImageType = ['image/png', 'image/jpeg', 'image/jpg']\n                    if(!supportedImageType.includes(target.files[0].type)){\n                        setUploadData(prevState =>({\n                            ...prevState,\n                            image: {error: 'Only png, jpeg or jpg image mimetype is supported'}\n                        }))\n                    }else{\n                    setUploadData(prevState => ({\n                        ...prevState,\n                        image: {error: '', value: target.files[0]}\n                    }))\n                }\n                }\n\n        }\n    }\n\n    const handleSubmit = (event)=>{\n        event.preventDefault()\n        const {category, description, image} = {...uploadData}\n        if(!category.value){\n            setUploadData(prevState =>({\n                ...prevState,\n                category: {error: 'Category is required', value: ''}\n            }))\n        }else if(!description.value){\n            setUploadData(prevState =>({\n                ...prevState,\n                description: {error: 'description is requird', value: ''}\n            }))\n        }else if(!image.value){\n            setUploadData(prevState =>({\n                ...prevState,\n                image: {error:'Upload a supported photo format', value: ''}\n            }))\n        }else if(category.value && description.value && image.value){\n            dispatch(uploadThunk(image.value, description.value, category.value, token))\n        }\n    }\n    return (\n\n        <div className=\"form-wrapper\">\n        <div className=\"form_control\">\n            <div className='signup'>Upload Photo</div>\n            \n            <form onSubmit={handleSubmit}>\n                <div className='category-wrapper'>\n                        <label htmlFor='category-option'>Image category</label>\n                        <select name=\"category\" onChange={handleChange} className='category'>\n                            <option selected value=\"love\">Love</option>\n                            <option value=\"celebration\">Celebration</option>\n                            <option value=\"happiness\">Happiness</option>\n                            <option value=\"sadness\">Sadness</option>\n                            <option value='throwback'>ThrowBack</option>\n                            <option value=\"general\">General</option>\n                        </select>\n\n                <div className='form-error'>\n                    {uploadData.category.error ? \n                    (<div>{uploadData.category.error}</div>): null}\n                </div>\n                </div>\n\n                <div className='description-wrapper'>\n                    <label htmlFor='description'>Caption</label>\n                   <TextareaAutosize name='description' rows={6} onChange={handleChange} className='description' />\n                </div>\n                <div className='form-error'>\n                    {uploadData.description.error ? (\n                        <div>{uploadData.description.error}</div> \n                    ): null}\n                </div>\n\n                <div className='image-upload'>\n                    <input\n                        id='image'\n                        name='image'\n                        type='file'\n                        onChange={handleChange}\n                    />\n                   \n                </div>\n                <div className='form-error'>\n                {uploadData.image.error ? uploadData.image.error : null }\n                \n                {uploadData.image.value && (<div className='image-name'>{uploadData.image.value.name}</div>)}\n                </div>\n                <div className='cancel-signup-wrapper'>\n                    <button className='upload-submit' type='submit'>{loading ? <div className='loading'><SyncLoader /></div> : 'Submit'}</button>\n                \n                </div>\n            </form>\n            {error && (<div className='reducer-error'>{error}</div>)}\n        </div>\n    </div>\n    )\n}\n\nexport default UploadImage","import {loginFail, loginStart, loginSuccess} from './login'\n\n\nconst loginActionThunk = (username, password) =>{\n    return async dispatch => {\n        dispatch(loginStart())\n\n        const graphqlQuery = {\n            query: `\n            mutation loginMutation($username: String!, $password: String!){\n                login(username: $username, password: $password){\n                    token\n                    refreshToken\n                    userId\n                    expiresIn\n                    username\n                    imageUrl\n                }\n            }`,\n\n            variables: {\n                username,\n                password\n            }\n        }\n\n        try{\n        const response = await fetch('/graphql', {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify(graphqlQuery)\n\n        })\n\n        const resData = await response.json()\n    \n        if(resData.errors){\n            if(resData.errors[0].status === 404){\n                throw new Error('Invalid password or username')\n            }\n            throw new Error('A server error occured!')\n        }\n\n        dispatch(loginSuccess(resData))\n    }catch(error){\n  \n        dispatch(loginFail(error))\n    }\n    }\n}\n\nexport default loginActionThunk","import React, { useEffect } from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Formik} from 'formik'\nimport SyncLoader from './SyncLoader'\nimport loginActionThunk from '../redux/action/loginThunk'\nimport '../styles/signup.css'\n\n\nconst LoginForm = ({handleLogin}) => {\n\n    const authData = useSelector(store => store.auth)\n    const {error, success, loading} = authData\n\n\n/*\n\n\n        N0TE\n        SIGNUPMODAL COMPONENT'S CSS STYLING IS USED FOR THIS COMPONENT\n*/\n   const dispatch = useDispatch()\n\n   const handleLoginModal = ()=>{\n       //close the loginModal\n       if(success){\n           handleLogin()\n       }\n   }\n\n\n\n    const validate = values => {\n        const errors = {}\n        \n        if(!values.username){\n                errors.username = 'Username is required'\n            }else if(values.username.length < 4){\n                errors.username = 'Username should be at least four characters long'\n            }else if(!values.password){\n                errors.password = 'Password is required'\n            }else if(values.password.length < 4){\n                errors.password = 'Password should be at least four characters long'\n\n        }\n\n        return errors\n    }\n   \n    return (\n    <div>\n    <Formik\n        initialValues = {{\n            password: '',\n            username: ''\n        }}\n        validate = {validate}\n        onSubmit= {values => dispatch(loginActionThunk(values.username, values.password))}>\n        \n        {props => (\n        <div className=\"form-wrapper\">\n        <div className=\"form_control\">\n\n            <div className='signup'>Login</div>\n            \n            <form onSubmit={props.handleSubmit}>\n                <div className='username-wrapper'>\n                    <label htmlFor='username' />\n                    <i className=\"fa fa-user icon\"></i>\n                    <input\n                        id='username'\n                        name='username'\n                        type='text'\n                        placeholder='Username'\n                        onChange={props.handleChange}\n                        onBlur={props.handleBlur}\n                        values={props.values.username}\n                    />\n                </div>\n                <div className='form-error'>\n                    {props.touched.username && props.errors.username ? \n                    (<div>{props.errors.username}</div>): null}\n                </div>\n\n                <div className='password-wrapper'>\n                    <label htmlFor='password' />\n                    <i className=\"fa fa-key icon\"></i>\n                    <input\n                        id='password'\n                        name='password'\n                        type='password'\n                        placeholder='Password'\n                        onChange={props.handleChange}\n                        onBlur={props.handleBlur}\n                    />\n                   \n                </div>\n                <div className='form-error'>\n                    {props.touched.password && props.errors.password ? (\n                        <div>{props.errors.password}</div>\n                    ): null}\n                </div>\n\n                <div className='cancel-signup-wrapper'>\n                    <div className='cancel-signup' onClick={handleLogin}>Cancel</div>\n                    <button className='signup-submit' onClick={handleLoginModal} type='submit'>{loading ? <div className='load'><SyncLoader /></div> : 'Submit'}</button>\n                   \n                </div>\n                {error && (<div className='reducer-error'>{error}</div>)}\n            </form>\n        </div>\n    </div>\n        )}\n    </Formik>\n\n   \n    </div>\n    )\n    }\n\nexport default LoginForm","import React, { useEffect, useState} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Redirect} from 'react-router-dom'\nimport {Formik} from 'formik'\nimport SyncLoader from './SyncLoader' \n//import '../styles/signup.css'\nimport '../styles/uploadForm.css'\nimport uploadThunk from '../redux/action/uploadThunk'\nimport TextareaAutosize from 'react-autosize-textarea'\nimport imageListThunk from '../redux/action/imageListActionThunk'\n\nconst UploadImage = ({handleUpload}) => {\n   const dispatch = useDispatch()\n   const SingleData = useSelector(store => store.singleImage)\n   const token = useSelector(store => store.auth.token)\n   const {error, success, loading, imageId} = SingleData\n   const [uploadData, setUploadData] = useState({\n       category: {error: '', value: ''},\n       description: {error: '', value: ''},\n       image:{error: '', value: null}\n    })\n\n    const handleChange = (event)=>{\n        event.persist()\n        const target = event.target;\n            if(target.name === 'category'){\n                if(!target.value){\n                    setUploadData(prevState => ({\n                        ...prevState,\n                        category: {error: 'Category is required', value: '',}\n                    }))\n                }else{\n                    setUploadData(prevState =>({\n                        ...prevState,\n                        category: {error: '', value: target.value}\n                    }))\n                }\n            }else if(target.name === 'description'){\n                if(!target.value){\n                    setUploadData(prevState =>({\n                        ...prevState,\n                        description:{error: 'Description is required', value: ''}\n                    }))\n                }else{\n                    setUploadData(prevState => ({\n                        ...prevState,\n                        description: {error: '', value: target.value}\n                    }))\n                }\n            }\n\n            else if(target.name === 'image'){\n                if(!target.files[0]){\n                    setUploadData(prevState =>({\n                        ...prevState,\n                        image: {error: 'Image is required', value: ''}\n                    }))\n                }else if(target.files[0]){\n                    const supportedImageType = ['image/png', 'image/jpeg', 'image/jpg']\n                    if(!supportedImageType.includes(target.files[0].type)){\n                        setUploadData(prevState =>({\n                            ...prevState,\n                            image: {error: 'Only png, jpeg or jpg image mimetype is supported'}\n                        }))\n                    }else{\n                    setUploadData(prevState => ({\n                        ...prevState,\n                        image: {error: '', value: target.files[0]}\n                    }))\n                }\n                }\n\n        }\n    }\n\n    const handleSubmit = (event)=>{\n        event.preventDefault()\n        const {category, description, image} = {...uploadData}\n        if(!category.value){\n            setUploadData(prevState =>({\n                ...prevState,\n                category: {error: 'Category is required', value: ''}\n            }))\n        }else if(!description.value){\n            setUploadData(prevState =>({\n                ...prevState,\n                description: {error: 'description is requird', value: ''}\n            }))\n        }else if(!image.value){\n            setUploadData(prevState =>({\n                ...prevState,\n                image: {error:'Upload a supported photo format', value: ''}\n            }))\n        }else if(category.value && description.value && image.value){\n            dispatch(uploadThunk(image.value, description.value, category.value, token))\n        }\n    }\n\n    if(success && !error){\n        return <Redirect to={`/details/${imageId}`} />\n    }\n    return (\n\n        <div className=\"form-wrapper\">\n        <div className=\"form_control\">\n            <div className='signup'>Upload Photo</div>\n            \n            <form onSubmit={handleSubmit}>\n                <div className='category-wrapper'>\n                        <label htmlFor='category-option'>Image category</label>\n                        <select name=\"category\" onChange={handleChange} className='category'>\n                            <option selected value=\"Love\">Love</option>\n                            <option value=\"Celebration\">Celebration</option>\n                            <option value=\"Happiness\">Happiness</option>\n                            <option value=\"Sadness\">Sadness</option>\n                            <option value='Throwback'>ThrowBack</option>\n                            <option value=\"General\">General</option>\n                        </select>\n\n                <div className='form-error'>\n                    {uploadData.category.error ? \n                    (<div>{uploadData.category.error}</div>): null}\n                </div>\n                </div>\n\n                <div className='description-wrapper'>\n                    <label htmlFor='description'>Caption</label>\n                   <TextareaAutosize name='description' rows={6} onChange={handleChange} className='description' />\n                </div>\n                <div className='form-error'>\n                    {uploadData.description.error ? (\n                        <div>{uploadData.description.error}</div> \n                    ): null}\n                </div>\n\n                <div className='image-upload'>\n                    <input\n                        id='image'\n                        name='image'\n                        type='file'\n                        onChange={handleChange}\n                    />\n                   \n                </div>\n                <div className='form-error'>\n                {uploadData.image.error ? uploadData.image.error : null }\n                \n                {uploadData.image.value && (<div className='image-name'>{uploadData.image.value.name}</div>)}\n                </div>\n                <div className='cancel-signup-wrapper'>\n                    <div className='cancel-signup' onClick={handleUpload}>Cancel</div>\n                    <button className='upload-submit' type='submit'>{loading ? <div className='load'><SyncLoader /></div> : 'Submit'}</button>\n                  \n                </div>\n            </form>\n            {error && (<div className='reducer-error'>{error}</div>)}\n        </div>\n    </div>\n    )\n}\n\nexport default UploadImage","import React from 'react'\nimport '../styles/noItem.css'\n\n\nconst NoItem = () =>{\n    return (\n        <div className='no-item'>\n            No image found\n        </div>\n    )\n}\n\nexport default NoItem","import React from 'react'\nimport ImageCard from '../components/ImageCard'\nimport Header from '../components/HeaderSection'\nimport {connect} from 'react-redux'\nimport {withRouter, Redirect} from 'react-router-dom'\nimport Loading from '../components/Loading'\nimport NoItem from '../components/NoItem'\nimport imageListThunk from '../redux/action/imageListActionThunk'\nimport thumpThunk from '../redux/action/thumpThunk'\nimport '../styles/imageList.css'\nimport Footer from '../components/Footer'\n\n\n\nclass Images extends React.Component{\n\n    constructor(props){\n        super(props)\n    }\n\n    componentDidMount(){\n        this.props.dispatch(imageListThunk())   \n    }\n\n   // componentDidUpdate(prevProps){\n     //   if(prevProps.images.error === 'You are not authorized'){\n       //     prevProps.handleLogin()\n        //}\n\n    componentDidUpdate(prevProps){\n        if(this.props.auth.success !== prevProps.auth.success){\n            this.props.handleLogin()\n        }\n    }\n\n\n    handleThumpUp = (imageId) =>{\n        const token = this.props.auth.token\n        console.log(imageId)\n        if(!token){\n            this.props.handleLogin()\n        }else{\n            this.props.dispatch(thumpThunk(imageId, token))\n        }\n    }\n\n\n\n    handleThumpDown=(imageId)=>{\n        const token = this.props.auth.token\n        if(!token){\n            this.props.handleLogin()\n        }else{\n            this.props.dispatch(thumpThunk(imageId, token, false))\n        }\n\n    }\n\n    handleDetailsRedirect =(imageId)=>{\n        this.props.history.push(`/details/${imageId}`)\n\n    }\n\n    render(){\n        const {images, loading} = this.props.images\n        const {imageUrl} = this.props.auth\n\n        let noImageOrImageCard = <NoItem />\n\n        if(images.length > 0){\n            noImageOrImageCard = images.map(image => <ImageCard  image={image} \n                detailsRedirect={this.handleDetailsRedirect} handleLogin={this.props.handleLogin} \n                handleThumpUp={this.handleThumpUp} handleThumpDown={this.handleThumpDown}/>)\n        }\n\n        return (\n        <div>\n            <section className='card-session'>\n                <Header userImageUrl={imageUrl} handleUpload={this.props.handleUploadForm} handleLogin={this.props.handleLogin}/>\n                {loading ? <div className='loading'><Loading /></div> : noImageOrImageCard}\n            </section>\n\n            <Footer />\n            </div>\n\n        )\n    }\n\n}\n\nconst mapState = (state) => {\n    return {\n        auth: state.auth,\n        images: state.images\n\n    }\n}\n\nexport default withRouter(connect(mapState)(Images))","import {logoutFail, logoutSuccess, logoutStart} from './logout'\n\n\nconst logoutDispatch = (token)=>{\n    return async dispatch =>{\n        const graphqlQuery = {\n            query: `\n            mutation {\n                logout\n            }`\n        }\n\n        try{\n            dispatch(logoutStart())\n    const fetchResponse = await fetch('/graphql', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token   \n        },\n        body: JSON.stringify(graphqlQuery)\n    })\n    const resData = await fetchResponse.json()\n    if(resData.errors){\n    if(resData.errors[0].status === 401){\n        throw Error('You are not authorized')\n    }\n    throw Error('User not found')\n    }\n    dispatch(logoutSuccess(resData))\n    }catch(error){\n        dispatch(logoutFail(error))\n    }\n\n    }\n}\n\nexport default logoutDispatch","import {beginRefreshAuth, successRefreshAuth, failedRefreshAuth} from '../action/refreshAuth'\n\n\nconst fetchRefreshToken = (token, id) =>{\n    return async (dispatch) => {\n\n        try{\n        dispatch(beginRefreshAuth())\n\n        const graphqlQuery = {\n            query: `\n            mutation refresh($refreshToken: String!, $userId: ID!){\n                refreshToken(refreshToken: $refreshToken, userId: $userId){\n                    expiresIn\n                    token\n                    username\n                    imageUrl\n                }\n            }\n            `,\n            variables: {\n                refreshToken: token,\n                userId: id\n            }\n        }\n        const resFetch = await fetch('/graphql', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(graphqlQuery)\n        })\n\n        const data = await resFetch.json()\n\n        if(data.errors){\n            if(data.errors[0].status === 401){\n                throw new Error('Please log in to your account')\n            }\n            throw new Error('The login user is not exist')\n        }\n        \n        dispatch(successRefreshAuth(data))  \n    }catch(error){\n        dispatch(failedRefreshAuth(error))\n    }\n}\n}\n\nexport default fetchRefreshToken","import React, { useState, useEffect } from 'react'\nimport {useSelector, useDispatch} from 'react-redux'\nimport {NavLink} from 'react-router-dom'\nimport {persistor} from '../redux/store'\nimport SignupForm from '../components/signupModal'\nimport ImageDetails from '../screen/ImageDetails'\nimport UploadScreen from '../screen/UploadScreen'\nimport LoginForm from '../components/Login'\nimport UploadForm from '../components/UploadForm'\n\n\nimport '../styles/App.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport ImageList from './ImageList'\nimport logoutDispatch from '../redux/action/logoutThunk'\nimport refreshTokenThunk from '../redux/action/refreshTokenThunk'\n\n\n\nfunction ScreenWrapper() {\n\n  const [openLoginModal, setOpenLogininModal] = useState(false)\n  const [openSignupModal, setOpenSignupModal] = useState(false)\n  const [openUploadFormModal, setOpenUploadFormModal] = useState(false)\n\n  const {isAuth, refreshToken, userId, token, expiresIn} = useSelector(store => store.auth)\n  const dispatch = useDispatch()\n\n  // this useEffect prevent logininModal from being true when user click logout\n  useEffect(()=>{\n      setOpenLogininModal(false)\n  }, [isAuth])\n\n\n  const dispatchRefresh = ()=>{\n    dispatch(refreshTokenThunk(refreshToken, userId))\n  }\n\n    \n\nuseEffect(()=>{\n    // create new valid token when the expiration time has passed\n    if(refreshToken){\n      let newTokenTimeout\n      const expirationDate = new Date(parseInt(expiresIn)).getTime()\n      const currentDate = Date.now()\n      if(currentDate > expirationDate){\n        newTokenTimeout = setTimeout(dispatchRefresh, 100)\n        return ()=> clearTimeout(newTokenTimeout)\n      }\n    }\n}, [])\n\n  useEffect(()=> {\n    /// refreshToken setInterval\n  //set setInterval for to get new token after successfully logIn\n    if(refreshToken){\n      let timeoutId = setInterval(dispatchRefresh, 720000)\n      return ()=> clearTimeout(timeoutId)\n    }\n  }, [refreshToken])\n\n  const handleLoginModal = () =>{\n    if(openLoginModal){\n      dispatch({type: 'CLEAR_ERROR'})\n      setOpenLogininModal(false)\n    }else{setOpenLogininModal(true)}\n  }\n\n  const handleSignupModal = () =>{\n    if(openSignupModal){\n      dispatch({type: 'CLEAR_ERROR'})\n      setOpenSignupModal(false)\n\n    }else{setOpenSignupModal(true)}\n  }\n\n  const handleUploadModal = () =>{\n    if(openUploadFormModal){\n      dispatch({type: 'CLEAR_ERROR'})\n      setOpenUploadFormModal(false)\n    }else{\n    setOpenUploadFormModal(true)\n    }\n  }\n\n  const signout = ()=>{\n    persistor.purge()\n    dispatch(logoutDispatch(token))\n    \n  }\n\n  let loginAndSignup = (<div className='logout-and-signin'>\n    <ul>\n    <li className=\"login nav-box\" onClick={handleLoginModal}>Login</li>\n    <li className=\"sign-up nav-box\" onClick={handleSignupModal}>Signup</li>\n    </ul>\n  </div>)\n\n  return (\n        <div>\n        <nav className='nav-wrapper'>\n            <NavLink className='website-name' to='/'>gidiShare</NavLink>\n            {isAuth ? <div className=\"logout nav-box\" onClick={signout}>Logout</div> : loginAndSignup}\n        </nav>\n\n        <div className='main-body'>\n        <section className={(openSignupModal ? 'signup-modal-open' : 'signup-modal-close')}>\n          <SignupForm handleSignup={handleSignupModal} />\n        </section>\n\n        <section className={(openLoginModal ? 'login-modal-open' : 'login-modal-close')}>\n          <LoginForm handleLogin={handleLoginModal}/>\n        </section>\n\n        <section className={(openUploadFormModal ? 'upload-open' : 'upload-close')}>\n          <UploadForm handleUpload={handleUploadModal} />\n        </section>\n\n        <Switch>\n        \n          <Route path=\"/details/:id\" exact render={props => <ImageDetails handleLogin={handleLoginModal} handleUploadForm={handleUploadModal} {...props} />} />/>\n          <Route path=\"/upload\" exact component={UploadScreen} />\n          <Route path='/' exact render={props => <ImageList handleLogin={handleLoginModal} handleUploadForm={handleUploadModal} {...props} />} />/>\n        </Switch>\n        </div>\n    </div>\n  )\n}\n\nexport default ScreenWrapper;\n","import React, { useState, useEffect } from 'react'\nimport {Provider} from 'react-redux'\nimport {NavLink} from 'react-router-dom'\nimport {PersistGate} from 'redux-persist/integration/react'\nimport {store, persistor} from './redux/store'\nimport Loading from './components/Loading'\nimport ScreenWrapper from './screen/ScreenWrapper'\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={<Loading />} persistor={persistor}>\n       <ScreenWrapper />\n      </PersistGate >\n  </Provider>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\n\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n"],"sourceRoot":""}